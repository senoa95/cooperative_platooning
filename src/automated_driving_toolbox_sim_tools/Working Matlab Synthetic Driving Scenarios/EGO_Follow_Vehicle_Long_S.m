function [allData, scenario, sensors, varargout] = EGO_Follow_Vehicle_Long_S()
%EGO_Follower_Vehicle_Long_S - Returns sensor detections
%    allData = EGO_Follower_Vehicle_Long_S returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = EGO_Follower_Vehicle_Long_S optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.5 and Automated Driving System Toolbox 1.3.
% Generated on: 09-Dec-2018 21:39:54

% Create the drivingScenario object and ego car
[scenario, egoCar, followerWayPoints] = createDrivingScenario;
varargout{1} = followerWayPoints;
allData.followerWayPoints = followerWayPoints;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {});
running = true;
while running
    
    % Generate the target poses of all actors relative to the ego car
    poses = targetPoses(egoCar);
    % Generate the boundaries of all lanes relative to the ego car for 100m
%     lanes = laneBoundaries(egoCar, 'XDistance', 100);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    isValidTime      = false(1, numSensors);
    isValidLaneTime  = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        lanes = laneBoundaries(egoCar, 'XDistance', linspace(0, sensors{sensorIndex}.MaxRange, 100));
        type = getDetectorOutput(sensors{sensorIndex});
        if strcmp(type, 'Objects only')
            [objectDets, numObjects, isValidTime(sensorIndex)] = sensors{sensorIndex}(poses, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensors{sensorIndex}(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensors{sensorIndex}(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensors{sensorIndex}(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        end
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections',   {laneDetections}); %#ok<AGROW>
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [5.4 0], ...
    'Height', 2.55, ...
    'Pitch', 0.514, ...
    'DetectionProbability', 0.95, ...
    'MaxSpeed', 83, ...
    'DetectorOutput', 'Lanes with occlusion', ...
    'Intrinsics', cameraIntrinsics([800 800],[320 240],[960 1280]), ...
    'ActorProfiles', profiles);
sensors{2} = radarDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [7.2 0], ...
    'MaxRange', 100, ...
    'ActorProfiles', profiles);
numSensors = 2;

function [scenario, egoCar, varargout] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [0 300 0;
    300 0 0;
    0 -300 0;
    -300 -600 0;
    0 -900 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification);

% Add the ego car
egoCar = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [0 298 0.01]);
waypoints = [0 298 0.01;
        69.8 265.8 0;
    92.9 254.4 0;
    116 242.1 0;
    137.2 230.2 0;
    155.4 218.7 0;
    171.6 207.6 0;
    185.4 197.8 0;
    207 180.3 0;
    220.5 167.1 0;
    230.97 156.11 0.01;
    242.4 143.53 0.01;
    259.57 120.11 0.01;
    268.9 105.06 0.01;
    283.4 76.3 0;
    294 41.8 0;
    298.2 11.4 0;
    298.3 -4.5 0;
    297 -22.4 0;
    292.8 -46.3 0;
    287.3 -65.3 0;
    279.9 -83.6 0;
    269.3 -104.4 0;
    249.3 -134.4 0;
    235.5 -151.4 0;
    223.3 -164.2 0;
    206.04 -180.87 0.01;
    176.8 -204.1 0;
    145.1 -225.2 0;
    112.8 -243.6 0;
    92.21 -254.53 0.01;
    61.5 -269.3 0;
    39.8 -279.6 0;
    13.73 -291.52 0.01;
    -43.3 -317.8 0;
    -120.6 -356 0;
    -165.7 -383.6 0;
    -199.1 -408.6 0;
    -224.2 -431.4 0;
    -243.1 -452.3 0;
    -257.3 -470.2 0;
    -271.2 -491.8 0;
    -288.2 -526.4 0;
    -296.2 -554 0;
    -300.1 -574 0;
    -302.6 -600.3 0;
    -300.8 -622.7 0;
    -295.5 -651.9 0;
    -284.8 -682.2 0;
    -266.3 -716.7 0;
    -238.8 -753.6 0;
    -208.4 -784 0;
    -180.8 -806 0;
    -140.6 -831.9 0;
    -93.1 -857.7 0;
    -26.7 -889.6 0;
    -0.9 -901.9 0];
waypoints = waypoints + [0.1*rand(size(waypoints,1),2) - 0.1, zeros(size(waypoints,1),1)] ; %random noise to keep the follower within 0.25m of lead
waypoints(1,:) = [0 298 0.01];
varargout{1} = waypoints;
speed = 25;
trajectory(egoCar, waypoints, speed);

% Add the non-ego actors
truck1 = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [15 291 0]);
waypoints = [15 291 0.01;
        69.8 265.8 0;
    92.9 254.4 0;
    116 242.1 0;
    137.2 230.2 0;
    155.4 218.7 0;
    171.6 207.6 0;
    185.4 197.8 0;
    207 180.3 0;
    220.5 167.1 0;
    230.97 156.11 0.01;
    242.4 143.53 0.01;
    259.57 120.11 0.01;
    268.9 105.06 0.01;
    283.4 76.3 0;
    294 41.8 0;
    298.2 11.4 0;
    298.3 -4.5 0;
    297 -22.4 0;
    292.8 -46.3 0;
    287.3 -65.3 0;
    279.9 -83.6 0;
    269.3 -104.4 0;
    249.3 -134.4 0;
    235.5 -151.4 0;
    223.3 -164.2 0;
    206.04 -180.87 0.01;
    176.8 -204.1 0;
    145.1 -225.2 0;
    112.8 -243.6 0;
    92.21 -254.53 0.01;
    61.5 -269.3 0;
    39.8 -279.6 0;
    13.73 -291.52 0.01;
    -43.3 -317.8 0;
    -120.6 -356 0;
    -165.7 -383.6 0;
    -199.1 -408.6 0;
    -224.2 -431.4 0;
    -243.1 -452.3 0;
    -257.3 -470.2 0;
    -271.2 -491.8 0;
    -288.2 -526.4 0;
    -296.2 -554 0;
    -300.1 -574 0;
    -302.6 -600.3 0;
    -300.8 -622.7 0;
    -295.5 -651.9 0;
    -284.8 -682.2 0;
    -266.3 -716.7 0;
    -238.8 -753.6 0;
    -208.4 -784 0;
    -180.8 -806 0;
    -140.6 -831.9 0;
    -93.1 -857.7 0;
    -26.7 -889.6 0;
    -0.9 -901.9 0];
speed = 25;
trajectory(truck1, waypoints, speed);

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
else
    output = 'Objects only';
end

