function [allData, scenario, sensors] = EGO_Lead_Vehicle()
%EGO_Lead_Vehicle - Returns sensor detections
%    allData = EGO_Lead_Vehicle returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = EGO_Lead_Vehicle optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.5 and Automated Driving System Toolbox 1.3.
% Generated on: 28-Nov-2018 18:03:33

leadingDist = 20;

x = linspace(0,100,200);
y = sqrt(100^2 - x.^2);
coords = [x' y'];
waypoints_follower = [x' y' 20*ones(200,1)];
waypoints_leader = [x(1,35:end)', y(35:end)', 20*ones(200 - 34,1)];


% Create the drivingScenario object and ego car
[scenario, egoCar] = createDrivingScenario(coords, waypoints_follower, waypoints_leader);

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {});
running = true;
while running
    
    % Generate the target poses of all actors relative to the ego car
    poses = targetPoses(egoCar);
    % Generate the boundaries of all lanes relative to the ego car for 100m
%     lanes = laneBoundaries(egoCar, 'XDistance', 100);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    isValidTime      = false(1, numSensors);
    isValidLaneTime  = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        lanes = laneBoundaries(egoCar, 'XDistance', linspace(0, sensors{sensorIndex}.MaxRange, 100));
        type = getDetectorOutput(sensors{sensorIndex});
        if strcmp(type, 'Objects only')
            [objectDets, numObjects, isValidTime(sensorIndex)] = sensors{sensorIndex}(poses, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensors{sensorIndex}(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensors{sensorIndex}(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensors{sensorIndex}(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        end
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections',   {laneDetections}); %#ok<AGROW>
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [5.4 0], ...
    'Height', 2.55, ...
    'Pitch', 0.523, ...
    'DetectorOutput', 'Lanes with occlusion', ...
    'Intrinsics', cameraIntrinsics([1600 800],[320 240],[960 1280]), ...
    'ActorProfiles', profiles);
sensors{2} = radarDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [7.2 0], ...
    'MaxRange', 100, ...
    'ActorProfiles', profiles);
numSensors = 2;

function [scenario, egoCar] = createDrivingScenario(varargin)
% createDrivingScenario Returns the drivingScenario defined in the Designer
if nargin >= 1
    roadCenters = varargin{1};
    if nargin == 3
        waypoints_follower = varargin{2};
        waypoints_leader= varargin{3};
    end
end

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
% roadCenters = [166.3 87.5 0;
%     108.8 55.3 0;
%     79.41 53.58 0;
%     64.64 51.77 0;
%     40.21 43.58 0;
%     11.51 23.78 0;
%     -11.49 -13.72 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification);

% Add the ego car
egoCar = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.6, ...
    'Height', 3.5, ...
    'Position', [4.05 10.74 0.01]);
% waypoints = [4.05 10.74 0.01;
%     12.31 21.97 0.01;
%     24 31.8 0;
%     31.91 37.41 0.01;
%     38.46 40.65 0.01;
%     46.83 44.9 0.01;
%     57.2 48.3 0;
%     69.7 50.8 0;
%     91.1 52.4 0;
%     109.61 53.87 0.01;
%     136.91 64.36 0.01;
%     166.48 85.41 0.01];
speed = 20;
trajectory(egoCar, waypoints_leader, speed);

% Add the non-ego actors
truck1 = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.6, ...
    'Height', 3.5, ...
    'Position', [-7.17 -9.27 0.01]);
% waypoints = [-7.17 -9.27 0.01;
%     -1.41 2.3 0;
%     12.39 22.05 0.01;
%     24.01 31.86 0.01;
%     31.9 37.4 0;
%     38.76 40.72 0.01;
%     46.9 45 0;
%     57.3 48.4 0;
%     69.7 50.8 0;
%     91.1 52.2 0;
%     109.72 53.84 0.01;
%     136.83 64.36 0.01;
%     166.4 85.5 0.01];
speed = 20;
trajectory(truck1, waypoints_follower, speed);

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
else
    output = 'Objects only';
end

