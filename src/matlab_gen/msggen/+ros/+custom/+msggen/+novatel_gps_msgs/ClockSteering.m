classdef ClockSteering < ros.Message
    %ClockSteering MATLAB implementation of novatel_gps_msgs/ClockSteering
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/ClockSteering' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '03024ea60365b742dd5e56411830735e' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        INTERNALSOURCE = int8(0)
        EXTERNALSOURCE = int8(1)
        FIRSTORDERSTEERINGSTATE = int8(0)
        SECONDORDERSTEERINGSTATE = int8(1)
        CALIBRATEHIGHSTEERINGSTATE = int8(2)
        CALIBRATELOWSTEERINGSTATE = int8(3)
        CALIBRATECENTERSTEERINGSTATE = int8(4)
    end
    
    properties (Dependent)
        Source
        SteeringState
        Period
        PulseWidth
        Bandwidth
        Slope
        Offset
        DriftRate
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Bandwidth', 'DriftRate', 'Offset', 'Period', 'PulseWidth', 'Slope', 'Source', 'SteeringState'} % List of non-constant message properties
        ROSPropertyList = {'bandwidth', 'drift_rate', 'offset', 'period', 'pulse_width', 'slope', 'source', 'steering_state'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ClockSteering(msg)
            %ClockSteering Construct the message object ClockSteering
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function source = get.Source(obj)
            %get.Source Get the value for property Source
            source = char(obj.JavaMessage.getSource);
        end
        
        function set.Source(obj, source)
            %set.Source Set the value for property Source
            source = convertStringsToChars(source);
            
            validateattributes(source, {'char', 'string'}, {}, 'ClockSteering', 'Source');
            
            obj.JavaMessage.setSource(source);
        end
        
        function steeringstate = get.SteeringState(obj)
            %get.SteeringState Get the value for property SteeringState
            steeringstate = char(obj.JavaMessage.getSteeringState);
        end
        
        function set.SteeringState(obj, steeringstate)
            %set.SteeringState Set the value for property SteeringState
            steeringstate = convertStringsToChars(steeringstate);
            
            validateattributes(steeringstate, {'char', 'string'}, {}, 'ClockSteering', 'SteeringState');
            
            obj.JavaMessage.setSteeringState(steeringstate);
        end
        
        function period = get.Period(obj)
            %get.Period Get the value for property Period
            period = typecast(int32(obj.JavaMessage.getPeriod), 'uint32');
        end
        
        function set.Period(obj, period)
            %set.Period Set the value for property Period
            validateattributes(period, {'numeric'}, {'nonempty', 'scalar'}, 'ClockSteering', 'Period');
            
            obj.JavaMessage.setPeriod(period);
        end
        
        function pulsewidth = get.PulseWidth(obj)
            %get.PulseWidth Get the value for property PulseWidth
            pulsewidth = double(obj.JavaMessage.getPulseWidth);
        end
        
        function set.PulseWidth(obj, pulsewidth)
            %set.PulseWidth Set the value for property PulseWidth
            validateattributes(pulsewidth, {'numeric'}, {'nonempty', 'scalar'}, 'ClockSteering', 'PulseWidth');
            
            obj.JavaMessage.setPulseWidth(pulsewidth);
        end
        
        function bandwidth = get.Bandwidth(obj)
            %get.Bandwidth Get the value for property Bandwidth
            bandwidth = double(obj.JavaMessage.getBandwidth);
        end
        
        function set.Bandwidth(obj, bandwidth)
            %set.Bandwidth Set the value for property Bandwidth
            validateattributes(bandwidth, {'numeric'}, {'nonempty', 'scalar'}, 'ClockSteering', 'Bandwidth');
            
            obj.JavaMessage.setBandwidth(bandwidth);
        end
        
        function slope = get.Slope(obj)
            %get.Slope Get the value for property Slope
            slope = single(obj.JavaMessage.getSlope);
        end
        
        function set.Slope(obj, slope)
            %set.Slope Set the value for property Slope
            validateattributes(slope, {'numeric'}, {'nonempty', 'scalar'}, 'ClockSteering', 'Slope');
            
            obj.JavaMessage.setSlope(slope);
        end
        
        function offset = get.Offset(obj)
            %get.Offset Get the value for property Offset
            offset = double(obj.JavaMessage.getOffset);
        end
        
        function set.Offset(obj, offset)
            %set.Offset Set the value for property Offset
            validateattributes(offset, {'numeric'}, {'nonempty', 'scalar'}, 'ClockSteering', 'Offset');
            
            obj.JavaMessage.setOffset(offset);
        end
        
        function driftrate = get.DriftRate(obj)
            %get.DriftRate Get the value for property DriftRate
            driftrate = double(obj.JavaMessage.getDriftRate);
        end
        
        function set.DriftRate(obj, driftrate)
            %set.DriftRate Set the value for property DriftRate
            validateattributes(driftrate, {'numeric'}, {'nonempty', 'scalar'}, 'ClockSteering', 'DriftRate');
            
            obj.JavaMessage.setDriftRate(driftrate);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Source = obj.Source;
            cpObj.SteeringState = obj.SteeringState;
            cpObj.Period = obj.Period;
            cpObj.PulseWidth = obj.PulseWidth;
            cpObj.Bandwidth = obj.Bandwidth;
            cpObj.Slope = obj.Slope;
            cpObj.Offset = obj.Offset;
            cpObj.DriftRate = obj.DriftRate;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Source = strObj.Source;
            obj.SteeringState = strObj.SteeringState;
            obj.Period = strObj.Period;
            obj.PulseWidth = strObj.PulseWidth;
            obj.Bandwidth = strObj.Bandwidth;
            obj.Slope = strObj.Slope;
            obj.Offset = strObj.Offset;
            obj.DriftRate = strObj.DriftRate;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Source = obj.Source;
            strObj.SteeringState = obj.SteeringState;
            strObj.Period = obj.Period;
            strObj.PulseWidth = obj.PulseWidth;
            strObj.Bandwidth = obj.Bandwidth;
            strObj.Slope = obj.Slope;
            strObj.Offset = obj.Offset;
            strObj.DriftRate = obj.DriftRate;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.ClockSteering.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.ClockSteering;
            obj.reload(strObj);
        end
    end
end
