classdef NovatelXYZ < ros.Message
    %NovatelXYZ MATLAB implementation of novatel_gps_msgs/NovatelXYZ
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/NovatelXYZ' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'd1ffc3181aa742b6133febb9d8f77d12' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        NovatelGpsMsgsNovatelExtendedSolutionStatusClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelExtendedSolutionStatus') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelExtendedSolutionStatus
        NovatelGpsMsgsNovatelMessageHeaderClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelMessageHeader') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelMessageHeader
        NovatelGpsMsgsNovatelSignalMaskClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelSignalMask') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelSignalMask
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        NovatelMsgHeader
        SolutionStatus
        PositionType
        X
        Y
        Z
        XSigma
        YSigma
        ZSigma
        VelocitySolutionStatus
        VelocityType
        XVel
        YVel
        ZVel
        XVelSigma
        YVelSigma
        ZVelSigma
        BaseStationId
        VelocityLatency
        DiffAge
        SolutionAge
        NumSatellitesTracked
        NumSatellitesUsedInSolution
        NumGpsAndGlonassL1UsedInSolution
        NumGpsAndGlonassL1AndL2UsedInSolution
        ExtendedSolutionStatus
        SignalMask
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'NovatelMsgHeader', [], 'ExtendedSolutionStatus', [], 'SignalMask', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'BaseStationId', 'DiffAge', 'ExtendedSolutionStatus', 'Header', 'NovatelMsgHeader', 'NumGpsAndGlonassL1AndL2UsedInSolution', 'NumGpsAndGlonassL1UsedInSolution', 'NumSatellitesTracked', 'NumSatellitesUsedInSolution', 'PositionType', 'SignalMask', 'SolutionAge', 'SolutionStatus', 'VelocityLatency', 'VelocitySolutionStatus', 'VelocityType', 'X', 'XSigma', 'XVel', 'XVelSigma', 'Y', 'YSigma', 'YVel', 'YVelSigma', 'Z', 'ZSigma', 'ZVel', 'ZVelSigma'} % List of non-constant message properties
        ROSPropertyList = {'base_station_id', 'diff_age', 'extended_solution_status', 'header', 'novatel_msg_header', 'num_gps_and_glonass_l1_and_l2_used_in_solution', 'num_gps_and_glonass_l1_used_in_solution', 'num_satellites_tracked', 'num_satellites_used_in_solution', 'position_type', 'signal_mask', 'solution_age', 'solution_status', 'velocity_latency', 'velocity_solution_status', 'velocity_type', 'x', 'x_sigma', 'x_vel', 'x_vel_sigma', 'y', 'y_sigma', 'y_vel', 'y_vel_sigma', 'z', 'z_sigma', 'z_vel', 'z_vel_sigma'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = NovatelXYZ(msg)
            %NovatelXYZ Construct the message object NovatelXYZ
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function novatelmsgheader = get.NovatelMsgHeader(obj)
            %get.NovatelMsgHeader Get the value for property NovatelMsgHeader
            if isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader = feval(obj.NovatelGpsMsgsNovatelMessageHeaderClass, obj.JavaMessage.getNovatelMsgHeader);
            end
            novatelmsgheader = obj.Cache.NovatelMsgHeader;
        end
        
        function set.NovatelMsgHeader(obj, novatelmsgheader)
            %set.NovatelMsgHeader Set the value for property NovatelMsgHeader
            validateattributes(novatelmsgheader, {obj.NovatelGpsMsgsNovatelMessageHeaderClass}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'NovatelMsgHeader');
            
            obj.JavaMessage.setNovatelMsgHeader(novatelmsgheader.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader.setJavaObject(novatelmsgheader.getJavaObject);
            end
        end
        
        function solutionstatus = get.SolutionStatus(obj)
            %get.SolutionStatus Get the value for property SolutionStatus
            solutionstatus = char(obj.JavaMessage.getSolutionStatus);
        end
        
        function set.SolutionStatus(obj, solutionstatus)
            %set.SolutionStatus Set the value for property SolutionStatus
            solutionstatus = convertStringsToChars(solutionstatus);
            
            validateattributes(solutionstatus, {'char', 'string'}, {}, 'NovatelXYZ', 'SolutionStatus');
            
            obj.JavaMessage.setSolutionStatus(solutionstatus);
        end
        
        function positiontype = get.PositionType(obj)
            %get.PositionType Get the value for property PositionType
            positiontype = char(obj.JavaMessage.getPositionType);
        end
        
        function set.PositionType(obj, positiontype)
            %set.PositionType Set the value for property PositionType
            positiontype = convertStringsToChars(positiontype);
            
            validateattributes(positiontype, {'char', 'string'}, {}, 'NovatelXYZ', 'PositionType');
            
            obj.JavaMessage.setPositionType(positiontype);
        end
        
        function x = get.X(obj)
            %get.X Get the value for property X
            x = double(obj.JavaMessage.getX);
        end
        
        function set.X(obj, x)
            %set.X Set the value for property X
            validateattributes(x, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'X');
            
            obj.JavaMessage.setX(x);
        end
        
        function y = get.Y(obj)
            %get.Y Get the value for property Y
            y = double(obj.JavaMessage.getY);
        end
        
        function set.Y(obj, y)
            %set.Y Set the value for property Y
            validateattributes(y, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'Y');
            
            obj.JavaMessage.setY(y);
        end
        
        function z = get.Z(obj)
            %get.Z Get the value for property Z
            z = double(obj.JavaMessage.getZ);
        end
        
        function set.Z(obj, z)
            %set.Z Set the value for property Z
            validateattributes(z, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'Z');
            
            obj.JavaMessage.setZ(z);
        end
        
        function xsigma = get.XSigma(obj)
            %get.XSigma Get the value for property XSigma
            xsigma = single(obj.JavaMessage.getXSigma);
        end
        
        function set.XSigma(obj, xsigma)
            %set.XSigma Set the value for property XSigma
            validateattributes(xsigma, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'XSigma');
            
            obj.JavaMessage.setXSigma(xsigma);
        end
        
        function ysigma = get.YSigma(obj)
            %get.YSigma Get the value for property YSigma
            ysigma = single(obj.JavaMessage.getYSigma);
        end
        
        function set.YSigma(obj, ysigma)
            %set.YSigma Set the value for property YSigma
            validateattributes(ysigma, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'YSigma');
            
            obj.JavaMessage.setYSigma(ysigma);
        end
        
        function zsigma = get.ZSigma(obj)
            %get.ZSigma Get the value for property ZSigma
            zsigma = single(obj.JavaMessage.getZSigma);
        end
        
        function set.ZSigma(obj, zsigma)
            %set.ZSigma Set the value for property ZSigma
            validateattributes(zsigma, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'ZSigma');
            
            obj.JavaMessage.setZSigma(zsigma);
        end
        
        function velocitysolutionstatus = get.VelocitySolutionStatus(obj)
            %get.VelocitySolutionStatus Get the value for property VelocitySolutionStatus
            velocitysolutionstatus = char(obj.JavaMessage.getVelocitySolutionStatus);
        end
        
        function set.VelocitySolutionStatus(obj, velocitysolutionstatus)
            %set.VelocitySolutionStatus Set the value for property VelocitySolutionStatus
            velocitysolutionstatus = convertStringsToChars(velocitysolutionstatus);
            
            validateattributes(velocitysolutionstatus, {'char', 'string'}, {}, 'NovatelXYZ', 'VelocitySolutionStatus');
            
            obj.JavaMessage.setVelocitySolutionStatus(velocitysolutionstatus);
        end
        
        function velocitytype = get.VelocityType(obj)
            %get.VelocityType Get the value for property VelocityType
            velocitytype = char(obj.JavaMessage.getVelocityType);
        end
        
        function set.VelocityType(obj, velocitytype)
            %set.VelocityType Set the value for property VelocityType
            velocitytype = convertStringsToChars(velocitytype);
            
            validateattributes(velocitytype, {'char', 'string'}, {}, 'NovatelXYZ', 'VelocityType');
            
            obj.JavaMessage.setVelocityType(velocitytype);
        end
        
        function xvel = get.XVel(obj)
            %get.XVel Get the value for property XVel
            xvel = double(obj.JavaMessage.getXVel);
        end
        
        function set.XVel(obj, xvel)
            %set.XVel Set the value for property XVel
            validateattributes(xvel, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'XVel');
            
            obj.JavaMessage.setXVel(xvel);
        end
        
        function yvel = get.YVel(obj)
            %get.YVel Get the value for property YVel
            yvel = double(obj.JavaMessage.getYVel);
        end
        
        function set.YVel(obj, yvel)
            %set.YVel Set the value for property YVel
            validateattributes(yvel, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'YVel');
            
            obj.JavaMessage.setYVel(yvel);
        end
        
        function zvel = get.ZVel(obj)
            %get.ZVel Get the value for property ZVel
            zvel = double(obj.JavaMessage.getZVel);
        end
        
        function set.ZVel(obj, zvel)
            %set.ZVel Set the value for property ZVel
            validateattributes(zvel, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'ZVel');
            
            obj.JavaMessage.setZVel(zvel);
        end
        
        function xvelsigma = get.XVelSigma(obj)
            %get.XVelSigma Get the value for property XVelSigma
            xvelsigma = single(obj.JavaMessage.getXVelSigma);
        end
        
        function set.XVelSigma(obj, xvelsigma)
            %set.XVelSigma Set the value for property XVelSigma
            validateattributes(xvelsigma, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'XVelSigma');
            
            obj.JavaMessage.setXVelSigma(xvelsigma);
        end
        
        function yvelsigma = get.YVelSigma(obj)
            %get.YVelSigma Get the value for property YVelSigma
            yvelsigma = single(obj.JavaMessage.getYVelSigma);
        end
        
        function set.YVelSigma(obj, yvelsigma)
            %set.YVelSigma Set the value for property YVelSigma
            validateattributes(yvelsigma, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'YVelSigma');
            
            obj.JavaMessage.setYVelSigma(yvelsigma);
        end
        
        function zvelsigma = get.ZVelSigma(obj)
            %get.ZVelSigma Get the value for property ZVelSigma
            zvelsigma = single(obj.JavaMessage.getZVelSigma);
        end
        
        function set.ZVelSigma(obj, zvelsigma)
            %set.ZVelSigma Set the value for property ZVelSigma
            validateattributes(zvelsigma, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'ZVelSigma');
            
            obj.JavaMessage.setZVelSigma(zvelsigma);
        end
        
        function basestationid = get.BaseStationId(obj)
            %get.BaseStationId Get the value for property BaseStationId
            basestationid = char(obj.JavaMessage.getBaseStationId);
        end
        
        function set.BaseStationId(obj, basestationid)
            %set.BaseStationId Set the value for property BaseStationId
            basestationid = convertStringsToChars(basestationid);
            
            validateattributes(basestationid, {'char', 'string'}, {}, 'NovatelXYZ', 'BaseStationId');
            
            obj.JavaMessage.setBaseStationId(basestationid);
        end
        
        function velocitylatency = get.VelocityLatency(obj)
            %get.VelocityLatency Get the value for property VelocityLatency
            velocitylatency = single(obj.JavaMessage.getVelocityLatency);
        end
        
        function set.VelocityLatency(obj, velocitylatency)
            %set.VelocityLatency Set the value for property VelocityLatency
            validateattributes(velocitylatency, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'VelocityLatency');
            
            obj.JavaMessage.setVelocityLatency(velocitylatency);
        end
        
        function diffage = get.DiffAge(obj)
            %get.DiffAge Get the value for property DiffAge
            diffage = single(obj.JavaMessage.getDiffAge);
        end
        
        function set.DiffAge(obj, diffage)
            %set.DiffAge Set the value for property DiffAge
            validateattributes(diffage, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'DiffAge');
            
            obj.JavaMessage.setDiffAge(diffage);
        end
        
        function solutionage = get.SolutionAge(obj)
            %get.SolutionAge Get the value for property SolutionAge
            solutionage = single(obj.JavaMessage.getSolutionAge);
        end
        
        function set.SolutionAge(obj, solutionage)
            %set.SolutionAge Set the value for property SolutionAge
            validateattributes(solutionage, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'SolutionAge');
            
            obj.JavaMessage.setSolutionAge(solutionage);
        end
        
        function numsatellitestracked = get.NumSatellitesTracked(obj)
            %get.NumSatellitesTracked Get the value for property NumSatellitesTracked
            numsatellitestracked = typecast(int8(obj.JavaMessage.getNumSatellitesTracked), 'uint8');
        end
        
        function set.NumSatellitesTracked(obj, numsatellitestracked)
            %set.NumSatellitesTracked Set the value for property NumSatellitesTracked
            validateattributes(numsatellitestracked, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'NumSatellitesTracked');
            
            obj.JavaMessage.setNumSatellitesTracked(numsatellitestracked);
        end
        
        function numsatellitesusedinsolution = get.NumSatellitesUsedInSolution(obj)
            %get.NumSatellitesUsedInSolution Get the value for property NumSatellitesUsedInSolution
            numsatellitesusedinsolution = typecast(int8(obj.JavaMessage.getNumSatellitesUsedInSolution), 'uint8');
        end
        
        function set.NumSatellitesUsedInSolution(obj, numsatellitesusedinsolution)
            %set.NumSatellitesUsedInSolution Set the value for property NumSatellitesUsedInSolution
            validateattributes(numsatellitesusedinsolution, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'NumSatellitesUsedInSolution');
            
            obj.JavaMessage.setNumSatellitesUsedInSolution(numsatellitesusedinsolution);
        end
        
        function numgpsandglonassl1usedinsolution = get.NumGpsAndGlonassL1UsedInSolution(obj)
            %get.NumGpsAndGlonassL1UsedInSolution Get the value for property NumGpsAndGlonassL1UsedInSolution
            numgpsandglonassl1usedinsolution = typecast(int8(obj.JavaMessage.getNumGpsAndGlonassL1UsedInSolution), 'uint8');
        end
        
        function set.NumGpsAndGlonassL1UsedInSolution(obj, numgpsandglonassl1usedinsolution)
            %set.NumGpsAndGlonassL1UsedInSolution Set the value for property NumGpsAndGlonassL1UsedInSolution
            validateattributes(numgpsandglonassl1usedinsolution, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'NumGpsAndGlonassL1UsedInSolution');
            
            obj.JavaMessage.setNumGpsAndGlonassL1UsedInSolution(numgpsandglonassl1usedinsolution);
        end
        
        function numgpsandglonassl1andl2usedinsolution = get.NumGpsAndGlonassL1AndL2UsedInSolution(obj)
            %get.NumGpsAndGlonassL1AndL2UsedInSolution Get the value for property NumGpsAndGlonassL1AndL2UsedInSolution
            numgpsandglonassl1andl2usedinsolution = typecast(int8(obj.JavaMessage.getNumGpsAndGlonassL1AndL2UsedInSolution), 'uint8');
        end
        
        function set.NumGpsAndGlonassL1AndL2UsedInSolution(obj, numgpsandglonassl1andl2usedinsolution)
            %set.NumGpsAndGlonassL1AndL2UsedInSolution Set the value for property NumGpsAndGlonassL1AndL2UsedInSolution
            validateattributes(numgpsandglonassl1andl2usedinsolution, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'NumGpsAndGlonassL1AndL2UsedInSolution');
            
            obj.JavaMessage.setNumGpsAndGlonassL1AndL2UsedInSolution(numgpsandglonassl1andl2usedinsolution);
        end
        
        function extendedsolutionstatus = get.ExtendedSolutionStatus(obj)
            %get.ExtendedSolutionStatus Get the value for property ExtendedSolutionStatus
            if isempty(obj.Cache.ExtendedSolutionStatus)
                obj.Cache.ExtendedSolutionStatus = feval(obj.NovatelGpsMsgsNovatelExtendedSolutionStatusClass, obj.JavaMessage.getExtendedSolutionStatus);
            end
            extendedsolutionstatus = obj.Cache.ExtendedSolutionStatus;
        end
        
        function set.ExtendedSolutionStatus(obj, extendedsolutionstatus)
            %set.ExtendedSolutionStatus Set the value for property ExtendedSolutionStatus
            validateattributes(extendedsolutionstatus, {obj.NovatelGpsMsgsNovatelExtendedSolutionStatusClass}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'ExtendedSolutionStatus');
            
            obj.JavaMessage.setExtendedSolutionStatus(extendedsolutionstatus.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ExtendedSolutionStatus)
                obj.Cache.ExtendedSolutionStatus.setJavaObject(extendedsolutionstatus.getJavaObject);
            end
        end
        
        function signalmask = get.SignalMask(obj)
            %get.SignalMask Get the value for property SignalMask
            if isempty(obj.Cache.SignalMask)
                obj.Cache.SignalMask = feval(obj.NovatelGpsMsgsNovatelSignalMaskClass, obj.JavaMessage.getSignalMask);
            end
            signalmask = obj.Cache.SignalMask;
        end
        
        function set.SignalMask(obj, signalmask)
            %set.SignalMask Set the value for property SignalMask
            validateattributes(signalmask, {obj.NovatelGpsMsgsNovatelSignalMaskClass}, {'nonempty', 'scalar'}, 'NovatelXYZ', 'SignalMask');
            
            obj.JavaMessage.setSignalMask(signalmask.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.SignalMask)
                obj.Cache.SignalMask.setJavaObject(signalmask.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.NovatelMsgHeader = [];
            obj.Cache.ExtendedSolutionStatus = [];
            obj.Cache.SignalMask = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SolutionStatus = obj.SolutionStatus;
            cpObj.PositionType = obj.PositionType;
            cpObj.X = obj.X;
            cpObj.Y = obj.Y;
            cpObj.Z = obj.Z;
            cpObj.XSigma = obj.XSigma;
            cpObj.YSigma = obj.YSigma;
            cpObj.ZSigma = obj.ZSigma;
            cpObj.VelocitySolutionStatus = obj.VelocitySolutionStatus;
            cpObj.VelocityType = obj.VelocityType;
            cpObj.XVel = obj.XVel;
            cpObj.YVel = obj.YVel;
            cpObj.ZVel = obj.ZVel;
            cpObj.XVelSigma = obj.XVelSigma;
            cpObj.YVelSigma = obj.YVelSigma;
            cpObj.ZVelSigma = obj.ZVelSigma;
            cpObj.BaseStationId = obj.BaseStationId;
            cpObj.VelocityLatency = obj.VelocityLatency;
            cpObj.DiffAge = obj.DiffAge;
            cpObj.SolutionAge = obj.SolutionAge;
            cpObj.NumSatellitesTracked = obj.NumSatellitesTracked;
            cpObj.NumSatellitesUsedInSolution = obj.NumSatellitesUsedInSolution;
            cpObj.NumGpsAndGlonassL1UsedInSolution = obj.NumGpsAndGlonassL1UsedInSolution;
            cpObj.NumGpsAndGlonassL1AndL2UsedInSolution = obj.NumGpsAndGlonassL1AndL2UsedInSolution;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.NovatelMsgHeader = copy(obj.NovatelMsgHeader);
            cpObj.ExtendedSolutionStatus = copy(obj.ExtendedSolutionStatus);
            cpObj.SignalMask = copy(obj.SignalMask);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SolutionStatus = strObj.SolutionStatus;
            obj.PositionType = strObj.PositionType;
            obj.X = strObj.X;
            obj.Y = strObj.Y;
            obj.Z = strObj.Z;
            obj.XSigma = strObj.XSigma;
            obj.YSigma = strObj.YSigma;
            obj.ZSigma = strObj.ZSigma;
            obj.VelocitySolutionStatus = strObj.VelocitySolutionStatus;
            obj.VelocityType = strObj.VelocityType;
            obj.XVel = strObj.XVel;
            obj.YVel = strObj.YVel;
            obj.ZVel = strObj.ZVel;
            obj.XVelSigma = strObj.XVelSigma;
            obj.YVelSigma = strObj.YVelSigma;
            obj.ZVelSigma = strObj.ZVelSigma;
            obj.BaseStationId = strObj.BaseStationId;
            obj.VelocityLatency = strObj.VelocityLatency;
            obj.DiffAge = strObj.DiffAge;
            obj.SolutionAge = strObj.SolutionAge;
            obj.NumSatellitesTracked = strObj.NumSatellitesTracked;
            obj.NumSatellitesUsedInSolution = strObj.NumSatellitesUsedInSolution;
            obj.NumGpsAndGlonassL1UsedInSolution = strObj.NumGpsAndGlonassL1UsedInSolution;
            obj.NumGpsAndGlonassL1AndL2UsedInSolution = strObj.NumGpsAndGlonassL1AndL2UsedInSolution;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.NovatelMsgHeader = feval([obj.NovatelGpsMsgsNovatelMessageHeaderClass '.loadobj'], strObj.NovatelMsgHeader);
            obj.ExtendedSolutionStatus = feval([obj.NovatelGpsMsgsNovatelExtendedSolutionStatusClass '.loadobj'], strObj.ExtendedSolutionStatus);
            obj.SignalMask = feval([obj.NovatelGpsMsgsNovatelSignalMaskClass '.loadobj'], strObj.SignalMask);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SolutionStatus = obj.SolutionStatus;
            strObj.PositionType = obj.PositionType;
            strObj.X = obj.X;
            strObj.Y = obj.Y;
            strObj.Z = obj.Z;
            strObj.XSigma = obj.XSigma;
            strObj.YSigma = obj.YSigma;
            strObj.ZSigma = obj.ZSigma;
            strObj.VelocitySolutionStatus = obj.VelocitySolutionStatus;
            strObj.VelocityType = obj.VelocityType;
            strObj.XVel = obj.XVel;
            strObj.YVel = obj.YVel;
            strObj.ZVel = obj.ZVel;
            strObj.XVelSigma = obj.XVelSigma;
            strObj.YVelSigma = obj.YVelSigma;
            strObj.ZVelSigma = obj.ZVelSigma;
            strObj.BaseStationId = obj.BaseStationId;
            strObj.VelocityLatency = obj.VelocityLatency;
            strObj.DiffAge = obj.DiffAge;
            strObj.SolutionAge = obj.SolutionAge;
            strObj.NumSatellitesTracked = obj.NumSatellitesTracked;
            strObj.NumSatellitesUsedInSolution = obj.NumSatellitesUsedInSolution;
            strObj.NumGpsAndGlonassL1UsedInSolution = obj.NumGpsAndGlonassL1UsedInSolution;
            strObj.NumGpsAndGlonassL1AndL2UsedInSolution = obj.NumGpsAndGlonassL1AndL2UsedInSolution;
            strObj.Header = saveobj(obj.Header);
            strObj.NovatelMsgHeader = saveobj(obj.NovatelMsgHeader);
            strObj.ExtendedSolutionStatus = saveobj(obj.ExtendedSolutionStatus);
            strObj.SignalMask = saveobj(obj.SignalMask);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.NovatelXYZ.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.NovatelXYZ;
            obj.reload(strObj);
        end
    end
end
