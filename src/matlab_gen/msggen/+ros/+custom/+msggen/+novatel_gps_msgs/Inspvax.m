classdef Inspvax < ros.Message
    %Inspvax MATLAB implementation of novatel_gps_msgs/Inspvax
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/Inspvax' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'cebf3b182479d01907e3894361b97eba' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        NovatelGpsMsgsNovatelExtendedSolutionStatusClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelExtendedSolutionStatus') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelExtendedSolutionStatus
        NovatelGpsMsgsNovatelMessageHeaderClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelMessageHeader') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelMessageHeader
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        NovatelMsgHeader
        InsStatus
        PositionType
        Latitude
        Longitude
        Altitude
        Undulation
        NorthVelocity
        EastVelocity
        UpVelocity
        Roll
        Pitch
        Azimuth
        LatitudeStd
        LongitudeStd
        AltitudeStd
        NorthVelocityStd
        EastVelocityStd
        UpVelocityStd
        RollStd
        PitchStd
        AzimuthStd
        ExtendedStatus
        SecondsSinceUpdate
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'NovatelMsgHeader', [], 'ExtendedStatus', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Altitude', 'AltitudeStd', 'Azimuth', 'AzimuthStd', 'EastVelocity', 'EastVelocityStd', 'ExtendedStatus', 'Header', 'InsStatus', 'Latitude', 'LatitudeStd', 'Longitude', 'LongitudeStd', 'NorthVelocity', 'NorthVelocityStd', 'NovatelMsgHeader', 'Pitch', 'PitchStd', 'PositionType', 'Roll', 'RollStd', 'SecondsSinceUpdate', 'Undulation', 'UpVelocity', 'UpVelocityStd'} % List of non-constant message properties
        ROSPropertyList = {'altitude', 'altitude_std', 'azimuth', 'azimuth_std', 'east_velocity', 'east_velocity_std', 'extended_status', 'header', 'ins_status', 'latitude', 'latitude_std', 'longitude', 'longitude_std', 'north_velocity', 'north_velocity_std', 'novatel_msg_header', 'pitch', 'pitch_std', 'position_type', 'roll', 'roll_std', 'seconds_since_update', 'undulation', 'up_velocity', 'up_velocity_std'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Inspvax(msg)
            %Inspvax Construct the message object Inspvax
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Inspvax', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function novatelmsgheader = get.NovatelMsgHeader(obj)
            %get.NovatelMsgHeader Get the value for property NovatelMsgHeader
            if isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader = feval(obj.NovatelGpsMsgsNovatelMessageHeaderClass, obj.JavaMessage.getNovatelMsgHeader);
            end
            novatelmsgheader = obj.Cache.NovatelMsgHeader;
        end
        
        function set.NovatelMsgHeader(obj, novatelmsgheader)
            %set.NovatelMsgHeader Set the value for property NovatelMsgHeader
            validateattributes(novatelmsgheader, {obj.NovatelGpsMsgsNovatelMessageHeaderClass}, {'nonempty', 'scalar'}, 'Inspvax', 'NovatelMsgHeader');
            
            obj.JavaMessage.setNovatelMsgHeader(novatelmsgheader.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader.setJavaObject(novatelmsgheader.getJavaObject);
            end
        end
        
        function insstatus = get.InsStatus(obj)
            %get.InsStatus Get the value for property InsStatus
            insstatus = char(obj.JavaMessage.getInsStatus);
        end
        
        function set.InsStatus(obj, insstatus)
            %set.InsStatus Set the value for property InsStatus
            insstatus = convertStringsToChars(insstatus);
            
            validateattributes(insstatus, {'char', 'string'}, {}, 'Inspvax', 'InsStatus');
            
            obj.JavaMessage.setInsStatus(insstatus);
        end
        
        function positiontype = get.PositionType(obj)
            %get.PositionType Get the value for property PositionType
            positiontype = char(obj.JavaMessage.getPositionType);
        end
        
        function set.PositionType(obj, positiontype)
            %set.PositionType Set the value for property PositionType
            positiontype = convertStringsToChars(positiontype);
            
            validateattributes(positiontype, {'char', 'string'}, {}, 'Inspvax', 'PositionType');
            
            obj.JavaMessage.setPositionType(positiontype);
        end
        
        function latitude = get.Latitude(obj)
            %get.Latitude Get the value for property Latitude
            latitude = double(obj.JavaMessage.getLatitude);
        end
        
        function set.Latitude(obj, latitude)
            %set.Latitude Set the value for property Latitude
            validateattributes(latitude, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'Latitude');
            
            obj.JavaMessage.setLatitude(latitude);
        end
        
        function longitude = get.Longitude(obj)
            %get.Longitude Get the value for property Longitude
            longitude = double(obj.JavaMessage.getLongitude);
        end
        
        function set.Longitude(obj, longitude)
            %set.Longitude Set the value for property Longitude
            validateattributes(longitude, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'Longitude');
            
            obj.JavaMessage.setLongitude(longitude);
        end
        
        function altitude = get.Altitude(obj)
            %get.Altitude Get the value for property Altitude
            altitude = double(obj.JavaMessage.getAltitude);
        end
        
        function set.Altitude(obj, altitude)
            %set.Altitude Set the value for property Altitude
            validateattributes(altitude, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'Altitude');
            
            obj.JavaMessage.setAltitude(altitude);
        end
        
        function undulation = get.Undulation(obj)
            %get.Undulation Get the value for property Undulation
            undulation = single(obj.JavaMessage.getUndulation);
        end
        
        function set.Undulation(obj, undulation)
            %set.Undulation Set the value for property Undulation
            validateattributes(undulation, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'Undulation');
            
            obj.JavaMessage.setUndulation(undulation);
        end
        
        function northvelocity = get.NorthVelocity(obj)
            %get.NorthVelocity Get the value for property NorthVelocity
            northvelocity = double(obj.JavaMessage.getNorthVelocity);
        end
        
        function set.NorthVelocity(obj, northvelocity)
            %set.NorthVelocity Set the value for property NorthVelocity
            validateattributes(northvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'NorthVelocity');
            
            obj.JavaMessage.setNorthVelocity(northvelocity);
        end
        
        function eastvelocity = get.EastVelocity(obj)
            %get.EastVelocity Get the value for property EastVelocity
            eastvelocity = double(obj.JavaMessage.getEastVelocity);
        end
        
        function set.EastVelocity(obj, eastvelocity)
            %set.EastVelocity Set the value for property EastVelocity
            validateattributes(eastvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'EastVelocity');
            
            obj.JavaMessage.setEastVelocity(eastvelocity);
        end
        
        function upvelocity = get.UpVelocity(obj)
            %get.UpVelocity Get the value for property UpVelocity
            upvelocity = double(obj.JavaMessage.getUpVelocity);
        end
        
        function set.UpVelocity(obj, upvelocity)
            %set.UpVelocity Set the value for property UpVelocity
            validateattributes(upvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'UpVelocity');
            
            obj.JavaMessage.setUpVelocity(upvelocity);
        end
        
        function roll = get.Roll(obj)
            %get.Roll Get the value for property Roll
            roll = double(obj.JavaMessage.getRoll);
        end
        
        function set.Roll(obj, roll)
            %set.Roll Set the value for property Roll
            validateattributes(roll, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'Roll');
            
            obj.JavaMessage.setRoll(roll);
        end
        
        function pitch = get.Pitch(obj)
            %get.Pitch Get the value for property Pitch
            pitch = double(obj.JavaMessage.getPitch);
        end
        
        function set.Pitch(obj, pitch)
            %set.Pitch Set the value for property Pitch
            validateattributes(pitch, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'Pitch');
            
            obj.JavaMessage.setPitch(pitch);
        end
        
        function azimuth = get.Azimuth(obj)
            %get.Azimuth Get the value for property Azimuth
            azimuth = double(obj.JavaMessage.getAzimuth);
        end
        
        function set.Azimuth(obj, azimuth)
            %set.Azimuth Set the value for property Azimuth
            validateattributes(azimuth, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'Azimuth');
            
            obj.JavaMessage.setAzimuth(azimuth);
        end
        
        function latitudestd = get.LatitudeStd(obj)
            %get.LatitudeStd Get the value for property LatitudeStd
            latitudestd = single(obj.JavaMessage.getLatitudeStd);
        end
        
        function set.LatitudeStd(obj, latitudestd)
            %set.LatitudeStd Set the value for property LatitudeStd
            validateattributes(latitudestd, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'LatitudeStd');
            
            obj.JavaMessage.setLatitudeStd(latitudestd);
        end
        
        function longitudestd = get.LongitudeStd(obj)
            %get.LongitudeStd Get the value for property LongitudeStd
            longitudestd = single(obj.JavaMessage.getLongitudeStd);
        end
        
        function set.LongitudeStd(obj, longitudestd)
            %set.LongitudeStd Set the value for property LongitudeStd
            validateattributes(longitudestd, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'LongitudeStd');
            
            obj.JavaMessage.setLongitudeStd(longitudestd);
        end
        
        function altitudestd = get.AltitudeStd(obj)
            %get.AltitudeStd Get the value for property AltitudeStd
            altitudestd = single(obj.JavaMessage.getAltitudeStd);
        end
        
        function set.AltitudeStd(obj, altitudestd)
            %set.AltitudeStd Set the value for property AltitudeStd
            validateattributes(altitudestd, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'AltitudeStd');
            
            obj.JavaMessage.setAltitudeStd(altitudestd);
        end
        
        function northvelocitystd = get.NorthVelocityStd(obj)
            %get.NorthVelocityStd Get the value for property NorthVelocityStd
            northvelocitystd = single(obj.JavaMessage.getNorthVelocityStd);
        end
        
        function set.NorthVelocityStd(obj, northvelocitystd)
            %set.NorthVelocityStd Set the value for property NorthVelocityStd
            validateattributes(northvelocitystd, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'NorthVelocityStd');
            
            obj.JavaMessage.setNorthVelocityStd(northvelocitystd);
        end
        
        function eastvelocitystd = get.EastVelocityStd(obj)
            %get.EastVelocityStd Get the value for property EastVelocityStd
            eastvelocitystd = single(obj.JavaMessage.getEastVelocityStd);
        end
        
        function set.EastVelocityStd(obj, eastvelocitystd)
            %set.EastVelocityStd Set the value for property EastVelocityStd
            validateattributes(eastvelocitystd, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'EastVelocityStd');
            
            obj.JavaMessage.setEastVelocityStd(eastvelocitystd);
        end
        
        function upvelocitystd = get.UpVelocityStd(obj)
            %get.UpVelocityStd Get the value for property UpVelocityStd
            upvelocitystd = single(obj.JavaMessage.getUpVelocityStd);
        end
        
        function set.UpVelocityStd(obj, upvelocitystd)
            %set.UpVelocityStd Set the value for property UpVelocityStd
            validateattributes(upvelocitystd, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'UpVelocityStd');
            
            obj.JavaMessage.setUpVelocityStd(upvelocitystd);
        end
        
        function rollstd = get.RollStd(obj)
            %get.RollStd Get the value for property RollStd
            rollstd = single(obj.JavaMessage.getRollStd);
        end
        
        function set.RollStd(obj, rollstd)
            %set.RollStd Set the value for property RollStd
            validateattributes(rollstd, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'RollStd');
            
            obj.JavaMessage.setRollStd(rollstd);
        end
        
        function pitchstd = get.PitchStd(obj)
            %get.PitchStd Get the value for property PitchStd
            pitchstd = single(obj.JavaMessage.getPitchStd);
        end
        
        function set.PitchStd(obj, pitchstd)
            %set.PitchStd Set the value for property PitchStd
            validateattributes(pitchstd, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'PitchStd');
            
            obj.JavaMessage.setPitchStd(pitchstd);
        end
        
        function azimuthstd = get.AzimuthStd(obj)
            %get.AzimuthStd Get the value for property AzimuthStd
            azimuthstd = single(obj.JavaMessage.getAzimuthStd);
        end
        
        function set.AzimuthStd(obj, azimuthstd)
            %set.AzimuthStd Set the value for property AzimuthStd
            validateattributes(azimuthstd, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'AzimuthStd');
            
            obj.JavaMessage.setAzimuthStd(azimuthstd);
        end
        
        function extendedstatus = get.ExtendedStatus(obj)
            %get.ExtendedStatus Get the value for property ExtendedStatus
            if isempty(obj.Cache.ExtendedStatus)
                obj.Cache.ExtendedStatus = feval(obj.NovatelGpsMsgsNovatelExtendedSolutionStatusClass, obj.JavaMessage.getExtendedStatus);
            end
            extendedstatus = obj.Cache.ExtendedStatus;
        end
        
        function set.ExtendedStatus(obj, extendedstatus)
            %set.ExtendedStatus Set the value for property ExtendedStatus
            validateattributes(extendedstatus, {obj.NovatelGpsMsgsNovatelExtendedSolutionStatusClass}, {'nonempty', 'scalar'}, 'Inspvax', 'ExtendedStatus');
            
            obj.JavaMessage.setExtendedStatus(extendedstatus.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ExtendedStatus)
                obj.Cache.ExtendedStatus.setJavaObject(extendedstatus.getJavaObject);
            end
        end
        
        function secondssinceupdate = get.SecondsSinceUpdate(obj)
            %get.SecondsSinceUpdate Get the value for property SecondsSinceUpdate
            secondssinceupdate = typecast(int16(obj.JavaMessage.getSecondsSinceUpdate), 'uint16');
        end
        
        function set.SecondsSinceUpdate(obj, secondssinceupdate)
            %set.SecondsSinceUpdate Set the value for property SecondsSinceUpdate
            validateattributes(secondssinceupdate, {'numeric'}, {'nonempty', 'scalar'}, 'Inspvax', 'SecondsSinceUpdate');
            
            obj.JavaMessage.setSecondsSinceUpdate(secondssinceupdate);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.NovatelMsgHeader = [];
            obj.Cache.ExtendedStatus = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.InsStatus = obj.InsStatus;
            cpObj.PositionType = obj.PositionType;
            cpObj.Latitude = obj.Latitude;
            cpObj.Longitude = obj.Longitude;
            cpObj.Altitude = obj.Altitude;
            cpObj.Undulation = obj.Undulation;
            cpObj.NorthVelocity = obj.NorthVelocity;
            cpObj.EastVelocity = obj.EastVelocity;
            cpObj.UpVelocity = obj.UpVelocity;
            cpObj.Roll = obj.Roll;
            cpObj.Pitch = obj.Pitch;
            cpObj.Azimuth = obj.Azimuth;
            cpObj.LatitudeStd = obj.LatitudeStd;
            cpObj.LongitudeStd = obj.LongitudeStd;
            cpObj.AltitudeStd = obj.AltitudeStd;
            cpObj.NorthVelocityStd = obj.NorthVelocityStd;
            cpObj.EastVelocityStd = obj.EastVelocityStd;
            cpObj.UpVelocityStd = obj.UpVelocityStd;
            cpObj.RollStd = obj.RollStd;
            cpObj.PitchStd = obj.PitchStd;
            cpObj.AzimuthStd = obj.AzimuthStd;
            cpObj.SecondsSinceUpdate = obj.SecondsSinceUpdate;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.NovatelMsgHeader = copy(obj.NovatelMsgHeader);
            cpObj.ExtendedStatus = copy(obj.ExtendedStatus);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.InsStatus = strObj.InsStatus;
            obj.PositionType = strObj.PositionType;
            obj.Latitude = strObj.Latitude;
            obj.Longitude = strObj.Longitude;
            obj.Altitude = strObj.Altitude;
            obj.Undulation = strObj.Undulation;
            obj.NorthVelocity = strObj.NorthVelocity;
            obj.EastVelocity = strObj.EastVelocity;
            obj.UpVelocity = strObj.UpVelocity;
            obj.Roll = strObj.Roll;
            obj.Pitch = strObj.Pitch;
            obj.Azimuth = strObj.Azimuth;
            obj.LatitudeStd = strObj.LatitudeStd;
            obj.LongitudeStd = strObj.LongitudeStd;
            obj.AltitudeStd = strObj.AltitudeStd;
            obj.NorthVelocityStd = strObj.NorthVelocityStd;
            obj.EastVelocityStd = strObj.EastVelocityStd;
            obj.UpVelocityStd = strObj.UpVelocityStd;
            obj.RollStd = strObj.RollStd;
            obj.PitchStd = strObj.PitchStd;
            obj.AzimuthStd = strObj.AzimuthStd;
            obj.SecondsSinceUpdate = strObj.SecondsSinceUpdate;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.NovatelMsgHeader = feval([obj.NovatelGpsMsgsNovatelMessageHeaderClass '.loadobj'], strObj.NovatelMsgHeader);
            obj.ExtendedStatus = feval([obj.NovatelGpsMsgsNovatelExtendedSolutionStatusClass '.loadobj'], strObj.ExtendedStatus);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.InsStatus = obj.InsStatus;
            strObj.PositionType = obj.PositionType;
            strObj.Latitude = obj.Latitude;
            strObj.Longitude = obj.Longitude;
            strObj.Altitude = obj.Altitude;
            strObj.Undulation = obj.Undulation;
            strObj.NorthVelocity = obj.NorthVelocity;
            strObj.EastVelocity = obj.EastVelocity;
            strObj.UpVelocity = obj.UpVelocity;
            strObj.Roll = obj.Roll;
            strObj.Pitch = obj.Pitch;
            strObj.Azimuth = obj.Azimuth;
            strObj.LatitudeStd = obj.LatitudeStd;
            strObj.LongitudeStd = obj.LongitudeStd;
            strObj.AltitudeStd = obj.AltitudeStd;
            strObj.NorthVelocityStd = obj.NorthVelocityStd;
            strObj.EastVelocityStd = obj.EastVelocityStd;
            strObj.UpVelocityStd = obj.UpVelocityStd;
            strObj.RollStd = obj.RollStd;
            strObj.PitchStd = obj.PitchStd;
            strObj.AzimuthStd = obj.AzimuthStd;
            strObj.SecondsSinceUpdate = obj.SecondsSinceUpdate;
            strObj.Header = saveobj(obj.Header);
            strObj.NovatelMsgHeader = saveobj(obj.NovatelMsgHeader);
            strObj.ExtendedStatus = saveobj(obj.ExtendedStatus);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.Inspvax.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.Inspvax;
            obj.reload(strObj);
        end
    end
end
