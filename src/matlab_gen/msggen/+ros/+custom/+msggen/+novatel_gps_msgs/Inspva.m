classdef Inspva < ros.Message
    %Inspva MATLAB implementation of novatel_gps_msgs/Inspva
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/Inspva' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'f6fbcfee08847158b28edeb7f76b942f' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        NovatelGpsMsgsNovatelMessageHeaderClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelMessageHeader') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelMessageHeader
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        NovatelMsgHeader
        Week
        Seconds
        Latitude
        Longitude
        Height
        NorthVelocity
        EastVelocity
        UpVelocity
        Roll
        Pitch
        Azimuth
        Status
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'NovatelMsgHeader', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Azimuth', 'EastVelocity', 'Header', 'Height', 'Latitude', 'Longitude', 'NorthVelocity', 'NovatelMsgHeader', 'Pitch', 'Roll', 'Seconds', 'Status', 'UpVelocity', 'Week'} % List of non-constant message properties
        ROSPropertyList = {'azimuth', 'east_velocity', 'header', 'height', 'latitude', 'longitude', 'north_velocity', 'novatel_msg_header', 'pitch', 'roll', 'seconds', 'status', 'up_velocity', 'week'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Inspva(msg)
            %Inspva Construct the message object Inspva
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Inspva', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function novatelmsgheader = get.NovatelMsgHeader(obj)
            %get.NovatelMsgHeader Get the value for property NovatelMsgHeader
            if isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader = feval(obj.NovatelGpsMsgsNovatelMessageHeaderClass, obj.JavaMessage.getNovatelMsgHeader);
            end
            novatelmsgheader = obj.Cache.NovatelMsgHeader;
        end
        
        function set.NovatelMsgHeader(obj, novatelmsgheader)
            %set.NovatelMsgHeader Set the value for property NovatelMsgHeader
            validateattributes(novatelmsgheader, {obj.NovatelGpsMsgsNovatelMessageHeaderClass}, {'nonempty', 'scalar'}, 'Inspva', 'NovatelMsgHeader');
            
            obj.JavaMessage.setNovatelMsgHeader(novatelmsgheader.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader.setJavaObject(novatelmsgheader.getJavaObject);
            end
        end
        
        function week = get.Week(obj)
            %get.Week Get the value for property Week
            week = typecast(int32(obj.JavaMessage.getWeek), 'uint32');
        end
        
        function set.Week(obj, week)
            %set.Week Set the value for property Week
            validateattributes(week, {'numeric'}, {'nonempty', 'scalar'}, 'Inspva', 'Week');
            
            obj.JavaMessage.setWeek(week);
        end
        
        function seconds = get.Seconds(obj)
            %get.Seconds Get the value for property Seconds
            seconds = double(obj.JavaMessage.getSeconds);
        end
        
        function set.Seconds(obj, seconds)
            %set.Seconds Set the value for property Seconds
            validateattributes(seconds, {'numeric'}, {'nonempty', 'scalar'}, 'Inspva', 'Seconds');
            
            obj.JavaMessage.setSeconds(seconds);
        end
        
        function latitude = get.Latitude(obj)
            %get.Latitude Get the value for property Latitude
            latitude = double(obj.JavaMessage.getLatitude);
        end
        
        function set.Latitude(obj, latitude)
            %set.Latitude Set the value for property Latitude
            validateattributes(latitude, {'numeric'}, {'nonempty', 'scalar'}, 'Inspva', 'Latitude');
            
            obj.JavaMessage.setLatitude(latitude);
        end
        
        function longitude = get.Longitude(obj)
            %get.Longitude Get the value for property Longitude
            longitude = double(obj.JavaMessage.getLongitude);
        end
        
        function set.Longitude(obj, longitude)
            %set.Longitude Set the value for property Longitude
            validateattributes(longitude, {'numeric'}, {'nonempty', 'scalar'}, 'Inspva', 'Longitude');
            
            obj.JavaMessage.setLongitude(longitude);
        end
        
        function height = get.Height(obj)
            %get.Height Get the value for property Height
            height = double(obj.JavaMessage.getHeight);
        end
        
        function set.Height(obj, height)
            %set.Height Set the value for property Height
            validateattributes(height, {'numeric'}, {'nonempty', 'scalar'}, 'Inspva', 'Height');
            
            obj.JavaMessage.setHeight(height);
        end
        
        function northvelocity = get.NorthVelocity(obj)
            %get.NorthVelocity Get the value for property NorthVelocity
            northvelocity = double(obj.JavaMessage.getNorthVelocity);
        end
        
        function set.NorthVelocity(obj, northvelocity)
            %set.NorthVelocity Set the value for property NorthVelocity
            validateattributes(northvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'Inspva', 'NorthVelocity');
            
            obj.JavaMessage.setNorthVelocity(northvelocity);
        end
        
        function eastvelocity = get.EastVelocity(obj)
            %get.EastVelocity Get the value for property EastVelocity
            eastvelocity = double(obj.JavaMessage.getEastVelocity);
        end
        
        function set.EastVelocity(obj, eastvelocity)
            %set.EastVelocity Set the value for property EastVelocity
            validateattributes(eastvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'Inspva', 'EastVelocity');
            
            obj.JavaMessage.setEastVelocity(eastvelocity);
        end
        
        function upvelocity = get.UpVelocity(obj)
            %get.UpVelocity Get the value for property UpVelocity
            upvelocity = double(obj.JavaMessage.getUpVelocity);
        end
        
        function set.UpVelocity(obj, upvelocity)
            %set.UpVelocity Set the value for property UpVelocity
            validateattributes(upvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'Inspva', 'UpVelocity');
            
            obj.JavaMessage.setUpVelocity(upvelocity);
        end
        
        function roll = get.Roll(obj)
            %get.Roll Get the value for property Roll
            roll = double(obj.JavaMessage.getRoll);
        end
        
        function set.Roll(obj, roll)
            %set.Roll Set the value for property Roll
            validateattributes(roll, {'numeric'}, {'nonempty', 'scalar'}, 'Inspva', 'Roll');
            
            obj.JavaMessage.setRoll(roll);
        end
        
        function pitch = get.Pitch(obj)
            %get.Pitch Get the value for property Pitch
            pitch = double(obj.JavaMessage.getPitch);
        end
        
        function set.Pitch(obj, pitch)
            %set.Pitch Set the value for property Pitch
            validateattributes(pitch, {'numeric'}, {'nonempty', 'scalar'}, 'Inspva', 'Pitch');
            
            obj.JavaMessage.setPitch(pitch);
        end
        
        function azimuth = get.Azimuth(obj)
            %get.Azimuth Get the value for property Azimuth
            azimuth = double(obj.JavaMessage.getAzimuth);
        end
        
        function set.Azimuth(obj, azimuth)
            %set.Azimuth Set the value for property Azimuth
            validateattributes(azimuth, {'numeric'}, {'nonempty', 'scalar'}, 'Inspva', 'Azimuth');
            
            obj.JavaMessage.setAzimuth(azimuth);
        end
        
        function status = get.Status(obj)
            %get.Status Get the value for property Status
            status = char(obj.JavaMessage.getStatus);
        end
        
        function set.Status(obj, status)
            %set.Status Set the value for property Status
            status = convertStringsToChars(status);
            
            validateattributes(status, {'char', 'string'}, {}, 'Inspva', 'Status');
            
            obj.JavaMessage.setStatus(status);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.NovatelMsgHeader = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Week = obj.Week;
            cpObj.Seconds = obj.Seconds;
            cpObj.Latitude = obj.Latitude;
            cpObj.Longitude = obj.Longitude;
            cpObj.Height = obj.Height;
            cpObj.NorthVelocity = obj.NorthVelocity;
            cpObj.EastVelocity = obj.EastVelocity;
            cpObj.UpVelocity = obj.UpVelocity;
            cpObj.Roll = obj.Roll;
            cpObj.Pitch = obj.Pitch;
            cpObj.Azimuth = obj.Azimuth;
            cpObj.Status = obj.Status;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.NovatelMsgHeader = copy(obj.NovatelMsgHeader);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Week = strObj.Week;
            obj.Seconds = strObj.Seconds;
            obj.Latitude = strObj.Latitude;
            obj.Longitude = strObj.Longitude;
            obj.Height = strObj.Height;
            obj.NorthVelocity = strObj.NorthVelocity;
            obj.EastVelocity = strObj.EastVelocity;
            obj.UpVelocity = strObj.UpVelocity;
            obj.Roll = strObj.Roll;
            obj.Pitch = strObj.Pitch;
            obj.Azimuth = strObj.Azimuth;
            obj.Status = strObj.Status;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.NovatelMsgHeader = feval([obj.NovatelGpsMsgsNovatelMessageHeaderClass '.loadobj'], strObj.NovatelMsgHeader);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Week = obj.Week;
            strObj.Seconds = obj.Seconds;
            strObj.Latitude = obj.Latitude;
            strObj.Longitude = obj.Longitude;
            strObj.Height = obj.Height;
            strObj.NorthVelocity = obj.NorthVelocity;
            strObj.EastVelocity = obj.EastVelocity;
            strObj.UpVelocity = obj.UpVelocity;
            strObj.Roll = obj.Roll;
            strObj.Pitch = obj.Pitch;
            strObj.Azimuth = obj.Azimuth;
            strObj.Status = obj.Status;
            strObj.Header = saveobj(obj.Header);
            strObj.NovatelMsgHeader = saveobj(obj.NovatelMsgHeader);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.Inspva.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.Inspva;
            obj.reload(strObj);
        end
    end
end
