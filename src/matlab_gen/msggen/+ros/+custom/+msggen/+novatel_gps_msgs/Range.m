classdef Range < ros.Message
    %Range MATLAB implementation of novatel_gps_msgs/Range
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/Range' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '536f13bea0b312445fad655869b252bf' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        NovatelGpsMsgsNovatelMessageHeaderClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelMessageHeader') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelMessageHeader
        NovatelGpsMsgsRangeInformationClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/RangeInformation') % Dispatch to MATLAB class for message type novatel_gps_msgs/RangeInformation
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        NovatelMsgHeader
        NumbOfObserv
        Info
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'NovatelMsgHeader', [], 'Info', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'Info', 'NovatelMsgHeader', 'NumbOfObserv'} % List of non-constant message properties
        ROSPropertyList = {'header', 'info', 'novatel_msg_header', 'numb_of_observ'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Range(msg)
            %Range Construct the message object Range
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Range', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function novatelmsgheader = get.NovatelMsgHeader(obj)
            %get.NovatelMsgHeader Get the value for property NovatelMsgHeader
            if isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader = feval(obj.NovatelGpsMsgsNovatelMessageHeaderClass, obj.JavaMessage.getNovatelMsgHeader);
            end
            novatelmsgheader = obj.Cache.NovatelMsgHeader;
        end
        
        function set.NovatelMsgHeader(obj, novatelmsgheader)
            %set.NovatelMsgHeader Set the value for property NovatelMsgHeader
            validateattributes(novatelmsgheader, {obj.NovatelGpsMsgsNovatelMessageHeaderClass}, {'nonempty', 'scalar'}, 'Range', 'NovatelMsgHeader');
            
            obj.JavaMessage.setNovatelMsgHeader(novatelmsgheader.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader.setJavaObject(novatelmsgheader.getJavaObject);
            end
        end
        
        function numbofobserv = get.NumbOfObserv(obj)
            %get.NumbOfObserv Get the value for property NumbOfObserv
            numbofobserv = int32(obj.JavaMessage.getNumbOfObserv);
        end
        
        function set.NumbOfObserv(obj, numbofobserv)
            %set.NumbOfObserv Set the value for property NumbOfObserv
            validateattributes(numbofobserv, {'numeric'}, {'nonempty', 'scalar'}, 'Range', 'NumbOfObserv');
            
            obj.JavaMessage.setNumbOfObserv(numbofobserv);
        end
        
        function info = get.Info(obj)
            %get.Info Get the value for property Info
            if isempty(obj.Cache.Info)
                javaArray = obj.JavaMessage.getInfo;
                array = obj.readJavaArray(javaArray, obj.NovatelGpsMsgsRangeInformationClass);
                obj.Cache.Info = feval(obj.NovatelGpsMsgsRangeInformationClass, array);
            end
            info = obj.Cache.Info;
        end
        
        function set.Info(obj, info)
            %set.Info Set the value for property Info
            if ~isvector(info) && isempty(info)
                % Allow empty [] input
                info = feval([obj.NovatelGpsMsgsRangeInformationClass '.empty'], 0, 1);
            end
            
            validateattributes(info, {obj.NovatelGpsMsgsRangeInformationClass}, {'vector'}, 'Range', 'Info');
            
            javaArray = obj.JavaMessage.getInfo;
            array = obj.writeJavaArray(info, javaArray, obj.NovatelGpsMsgsRangeInformationClass);
            obj.JavaMessage.setInfo(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Info)
                obj.Cache.Info = [];
                obj.Cache.Info = obj.Info;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.NovatelMsgHeader = [];
            obj.Cache.Info = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.NumbOfObserv = obj.NumbOfObserv;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.NovatelMsgHeader = copy(obj.NovatelMsgHeader);
            cpObj.Info = copy(obj.Info);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.NumbOfObserv = strObj.NumbOfObserv;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.NovatelMsgHeader = feval([obj.NovatelGpsMsgsNovatelMessageHeaderClass '.loadobj'], strObj.NovatelMsgHeader);
            InfoCell = arrayfun(@(x) feval([obj.NovatelGpsMsgsRangeInformationClass '.loadobj'], x), strObj.Info, 'UniformOutput', false);
            obj.Info = vertcat(InfoCell{:});
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.NumbOfObserv = obj.NumbOfObserv;
            strObj.Header = saveobj(obj.Header);
            strObj.NovatelMsgHeader = saveobj(obj.NovatelMsgHeader);
            strObj.Info = arrayfun(@(x) saveobj(x), obj.Info);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.Range.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.Range;
            obj.reload(strObj);
        end
    end
end
