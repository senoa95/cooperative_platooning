classdef NovatelHeading2 < ros.Message
    %NovatelHeading2 MATLAB implementation of novatel_gps_msgs/NovatelHeading2
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/NovatelHeading2' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '1195c3bddd7a9ddbaf770e688a2f354a' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        SOURCEPRIMARYANTENNA = uint8(0)
        SOURCESECONDARYANTENNA = uint8(1)
    end
    
    properties (Constant, Access = protected)
        NovatelGpsMsgsNovatelExtendedSolutionStatusClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelExtendedSolutionStatus') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelExtendedSolutionStatus
        NovatelGpsMsgsNovatelMessageHeaderClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelMessageHeader') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelMessageHeader
        NovatelGpsMsgsNovatelSignalMaskClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelSignalMask') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelSignalMask
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        NovatelMsgHeader
        SolutionStatus
        PositionType
        BaselineLength
        Heading
        Pitch
        HeadingSigma
        PitchSigma
        RoverStationId
        MasterStationId
        NumSatellitesTracked
        NumSatellitesUsedInSolution
        NumSatellitesAboveElevationMaskAngle
        NumSatellitesAboveElevationMaskAngleL2
        SolutionSource
        ExtendedSolutionStatus
        SignalMask
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'NovatelMsgHeader', [], 'ExtendedSolutionStatus', [], 'SignalMask', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'BaselineLength', 'ExtendedSolutionStatus', 'Header', 'Heading', 'HeadingSigma', 'MasterStationId', 'NovatelMsgHeader', 'NumSatellitesAboveElevationMaskAngle', 'NumSatellitesAboveElevationMaskAngleL2', 'NumSatellitesTracked', 'NumSatellitesUsedInSolution', 'Pitch', 'PitchSigma', 'PositionType', 'RoverStationId', 'SignalMask', 'SolutionSource', 'SolutionStatus'} % List of non-constant message properties
        ROSPropertyList = {'baseline_length', 'extended_solution_status', 'header', 'heading', 'heading_sigma', 'master_station_id', 'novatel_msg_header', 'num_satellites_above_elevation_mask_angle', 'num_satellites_above_elevation_mask_angle_l2', 'num_satellites_tracked', 'num_satellites_used_in_solution', 'pitch', 'pitch_sigma', 'position_type', 'rover_station_id', 'signal_mask', 'solution_source', 'solution_status'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = NovatelHeading2(msg)
            %NovatelHeading2 Construct the message object NovatelHeading2
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'NovatelHeading2', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function novatelmsgheader = get.NovatelMsgHeader(obj)
            %get.NovatelMsgHeader Get the value for property NovatelMsgHeader
            if isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader = feval(obj.NovatelGpsMsgsNovatelMessageHeaderClass, obj.JavaMessage.getNovatelMsgHeader);
            end
            novatelmsgheader = obj.Cache.NovatelMsgHeader;
        end
        
        function set.NovatelMsgHeader(obj, novatelmsgheader)
            %set.NovatelMsgHeader Set the value for property NovatelMsgHeader
            validateattributes(novatelmsgheader, {obj.NovatelGpsMsgsNovatelMessageHeaderClass}, {'nonempty', 'scalar'}, 'NovatelHeading2', 'NovatelMsgHeader');
            
            obj.JavaMessage.setNovatelMsgHeader(novatelmsgheader.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader.setJavaObject(novatelmsgheader.getJavaObject);
            end
        end
        
        function solutionstatus = get.SolutionStatus(obj)
            %get.SolutionStatus Get the value for property SolutionStatus
            solutionstatus = char(obj.JavaMessage.getSolutionStatus);
        end
        
        function set.SolutionStatus(obj, solutionstatus)
            %set.SolutionStatus Set the value for property SolutionStatus
            solutionstatus = convertStringsToChars(solutionstatus);
            
            validateattributes(solutionstatus, {'char', 'string'}, {}, 'NovatelHeading2', 'SolutionStatus');
            
            obj.JavaMessage.setSolutionStatus(solutionstatus);
        end
        
        function positiontype = get.PositionType(obj)
            %get.PositionType Get the value for property PositionType
            positiontype = char(obj.JavaMessage.getPositionType);
        end
        
        function set.PositionType(obj, positiontype)
            %set.PositionType Set the value for property PositionType
            positiontype = convertStringsToChars(positiontype);
            
            validateattributes(positiontype, {'char', 'string'}, {}, 'NovatelHeading2', 'PositionType');
            
            obj.JavaMessage.setPositionType(positiontype);
        end
        
        function baselinelength = get.BaselineLength(obj)
            %get.BaselineLength Get the value for property BaselineLength
            baselinelength = single(obj.JavaMessage.getBaselineLength);
        end
        
        function set.BaselineLength(obj, baselinelength)
            %set.BaselineLength Set the value for property BaselineLength
            validateattributes(baselinelength, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelHeading2', 'BaselineLength');
            
            obj.JavaMessage.setBaselineLength(baselinelength);
        end
        
        function heading = get.Heading(obj)
            %get.Heading Get the value for property Heading
            heading = single(obj.JavaMessage.getHeading);
        end
        
        function set.Heading(obj, heading)
            %set.Heading Set the value for property Heading
            validateattributes(heading, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelHeading2', 'Heading');
            
            obj.JavaMessage.setHeading(heading);
        end
        
        function pitch = get.Pitch(obj)
            %get.Pitch Get the value for property Pitch
            pitch = single(obj.JavaMessage.getPitch);
        end
        
        function set.Pitch(obj, pitch)
            %set.Pitch Set the value for property Pitch
            validateattributes(pitch, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelHeading2', 'Pitch');
            
            obj.JavaMessage.setPitch(pitch);
        end
        
        function headingsigma = get.HeadingSigma(obj)
            %get.HeadingSigma Get the value for property HeadingSigma
            headingsigma = single(obj.JavaMessage.getHeadingSigma);
        end
        
        function set.HeadingSigma(obj, headingsigma)
            %set.HeadingSigma Set the value for property HeadingSigma
            validateattributes(headingsigma, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelHeading2', 'HeadingSigma');
            
            obj.JavaMessage.setHeadingSigma(headingsigma);
        end
        
        function pitchsigma = get.PitchSigma(obj)
            %get.PitchSigma Get the value for property PitchSigma
            pitchsigma = single(obj.JavaMessage.getPitchSigma);
        end
        
        function set.PitchSigma(obj, pitchsigma)
            %set.PitchSigma Set the value for property PitchSigma
            validateattributes(pitchsigma, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelHeading2', 'PitchSigma');
            
            obj.JavaMessage.setPitchSigma(pitchsigma);
        end
        
        function roverstationid = get.RoverStationId(obj)
            %get.RoverStationId Get the value for property RoverStationId
            roverstationid = char(obj.JavaMessage.getRoverStationId);
        end
        
        function set.RoverStationId(obj, roverstationid)
            %set.RoverStationId Set the value for property RoverStationId
            roverstationid = convertStringsToChars(roverstationid);
            
            validateattributes(roverstationid, {'char', 'string'}, {}, 'NovatelHeading2', 'RoverStationId');
            
            obj.JavaMessage.setRoverStationId(roverstationid);
        end
        
        function masterstationid = get.MasterStationId(obj)
            %get.MasterStationId Get the value for property MasterStationId
            masterstationid = char(obj.JavaMessage.getMasterStationId);
        end
        
        function set.MasterStationId(obj, masterstationid)
            %set.MasterStationId Set the value for property MasterStationId
            masterstationid = convertStringsToChars(masterstationid);
            
            validateattributes(masterstationid, {'char', 'string'}, {}, 'NovatelHeading2', 'MasterStationId');
            
            obj.JavaMessage.setMasterStationId(masterstationid);
        end
        
        function numsatellitestracked = get.NumSatellitesTracked(obj)
            %get.NumSatellitesTracked Get the value for property NumSatellitesTracked
            numsatellitestracked = typecast(int8(obj.JavaMessage.getNumSatellitesTracked), 'uint8');
        end
        
        function set.NumSatellitesTracked(obj, numsatellitestracked)
            %set.NumSatellitesTracked Set the value for property NumSatellitesTracked
            validateattributes(numsatellitestracked, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelHeading2', 'NumSatellitesTracked');
            
            obj.JavaMessage.setNumSatellitesTracked(numsatellitestracked);
        end
        
        function numsatellitesusedinsolution = get.NumSatellitesUsedInSolution(obj)
            %get.NumSatellitesUsedInSolution Get the value for property NumSatellitesUsedInSolution
            numsatellitesusedinsolution = typecast(int8(obj.JavaMessage.getNumSatellitesUsedInSolution), 'uint8');
        end
        
        function set.NumSatellitesUsedInSolution(obj, numsatellitesusedinsolution)
            %set.NumSatellitesUsedInSolution Set the value for property NumSatellitesUsedInSolution
            validateattributes(numsatellitesusedinsolution, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelHeading2', 'NumSatellitesUsedInSolution');
            
            obj.JavaMessage.setNumSatellitesUsedInSolution(numsatellitesusedinsolution);
        end
        
        function numsatellitesaboveelevationmaskangle = get.NumSatellitesAboveElevationMaskAngle(obj)
            %get.NumSatellitesAboveElevationMaskAngle Get the value for property NumSatellitesAboveElevationMaskAngle
            numsatellitesaboveelevationmaskangle = typecast(int8(obj.JavaMessage.getNumSatellitesAboveElevationMaskAngle), 'uint8');
        end
        
        function set.NumSatellitesAboveElevationMaskAngle(obj, numsatellitesaboveelevationmaskangle)
            %set.NumSatellitesAboveElevationMaskAngle Set the value for property NumSatellitesAboveElevationMaskAngle
            validateattributes(numsatellitesaboveelevationmaskangle, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelHeading2', 'NumSatellitesAboveElevationMaskAngle');
            
            obj.JavaMessage.setNumSatellitesAboveElevationMaskAngle(numsatellitesaboveelevationmaskangle);
        end
        
        function numsatellitesaboveelevationmaskanglel2 = get.NumSatellitesAboveElevationMaskAngleL2(obj)
            %get.NumSatellitesAboveElevationMaskAngleL2 Get the value for property NumSatellitesAboveElevationMaskAngleL2
            numsatellitesaboveelevationmaskanglel2 = typecast(int8(obj.JavaMessage.getNumSatellitesAboveElevationMaskAngleL2), 'uint8');
        end
        
        function set.NumSatellitesAboveElevationMaskAngleL2(obj, numsatellitesaboveelevationmaskanglel2)
            %set.NumSatellitesAboveElevationMaskAngleL2 Set the value for property NumSatellitesAboveElevationMaskAngleL2
            validateattributes(numsatellitesaboveelevationmaskanglel2, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelHeading2', 'NumSatellitesAboveElevationMaskAngleL2');
            
            obj.JavaMessage.setNumSatellitesAboveElevationMaskAngleL2(numsatellitesaboveelevationmaskanglel2);
        end
        
        function solutionsource = get.SolutionSource(obj)
            %get.SolutionSource Get the value for property SolutionSource
            solutionsource = typecast(int8(obj.JavaMessage.getSolutionSource), 'uint8');
        end
        
        function set.SolutionSource(obj, solutionsource)
            %set.SolutionSource Set the value for property SolutionSource
            validateattributes(solutionsource, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelHeading2', 'SolutionSource');
            
            obj.JavaMessage.setSolutionSource(solutionsource);
        end
        
        function extendedsolutionstatus = get.ExtendedSolutionStatus(obj)
            %get.ExtendedSolutionStatus Get the value for property ExtendedSolutionStatus
            if isempty(obj.Cache.ExtendedSolutionStatus)
                obj.Cache.ExtendedSolutionStatus = feval(obj.NovatelGpsMsgsNovatelExtendedSolutionStatusClass, obj.JavaMessage.getExtendedSolutionStatus);
            end
            extendedsolutionstatus = obj.Cache.ExtendedSolutionStatus;
        end
        
        function set.ExtendedSolutionStatus(obj, extendedsolutionstatus)
            %set.ExtendedSolutionStatus Set the value for property ExtendedSolutionStatus
            validateattributes(extendedsolutionstatus, {obj.NovatelGpsMsgsNovatelExtendedSolutionStatusClass}, {'nonempty', 'scalar'}, 'NovatelHeading2', 'ExtendedSolutionStatus');
            
            obj.JavaMessage.setExtendedSolutionStatus(extendedsolutionstatus.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ExtendedSolutionStatus)
                obj.Cache.ExtendedSolutionStatus.setJavaObject(extendedsolutionstatus.getJavaObject);
            end
        end
        
        function signalmask = get.SignalMask(obj)
            %get.SignalMask Get the value for property SignalMask
            if isempty(obj.Cache.SignalMask)
                obj.Cache.SignalMask = feval(obj.NovatelGpsMsgsNovatelSignalMaskClass, obj.JavaMessage.getSignalMask);
            end
            signalmask = obj.Cache.SignalMask;
        end
        
        function set.SignalMask(obj, signalmask)
            %set.SignalMask Set the value for property SignalMask
            validateattributes(signalmask, {obj.NovatelGpsMsgsNovatelSignalMaskClass}, {'nonempty', 'scalar'}, 'NovatelHeading2', 'SignalMask');
            
            obj.JavaMessage.setSignalMask(signalmask.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.SignalMask)
                obj.Cache.SignalMask.setJavaObject(signalmask.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.NovatelMsgHeader = [];
            obj.Cache.ExtendedSolutionStatus = [];
            obj.Cache.SignalMask = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SolutionStatus = obj.SolutionStatus;
            cpObj.PositionType = obj.PositionType;
            cpObj.BaselineLength = obj.BaselineLength;
            cpObj.Heading = obj.Heading;
            cpObj.Pitch = obj.Pitch;
            cpObj.HeadingSigma = obj.HeadingSigma;
            cpObj.PitchSigma = obj.PitchSigma;
            cpObj.RoverStationId = obj.RoverStationId;
            cpObj.MasterStationId = obj.MasterStationId;
            cpObj.NumSatellitesTracked = obj.NumSatellitesTracked;
            cpObj.NumSatellitesUsedInSolution = obj.NumSatellitesUsedInSolution;
            cpObj.NumSatellitesAboveElevationMaskAngle = obj.NumSatellitesAboveElevationMaskAngle;
            cpObj.NumSatellitesAboveElevationMaskAngleL2 = obj.NumSatellitesAboveElevationMaskAngleL2;
            cpObj.SolutionSource = obj.SolutionSource;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.NovatelMsgHeader = copy(obj.NovatelMsgHeader);
            cpObj.ExtendedSolutionStatus = copy(obj.ExtendedSolutionStatus);
            cpObj.SignalMask = copy(obj.SignalMask);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SolutionStatus = strObj.SolutionStatus;
            obj.PositionType = strObj.PositionType;
            obj.BaselineLength = strObj.BaselineLength;
            obj.Heading = strObj.Heading;
            obj.Pitch = strObj.Pitch;
            obj.HeadingSigma = strObj.HeadingSigma;
            obj.PitchSigma = strObj.PitchSigma;
            obj.RoverStationId = strObj.RoverStationId;
            obj.MasterStationId = strObj.MasterStationId;
            obj.NumSatellitesTracked = strObj.NumSatellitesTracked;
            obj.NumSatellitesUsedInSolution = strObj.NumSatellitesUsedInSolution;
            obj.NumSatellitesAboveElevationMaskAngle = strObj.NumSatellitesAboveElevationMaskAngle;
            obj.NumSatellitesAboveElevationMaskAngleL2 = strObj.NumSatellitesAboveElevationMaskAngleL2;
            obj.SolutionSource = strObj.SolutionSource;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.NovatelMsgHeader = feval([obj.NovatelGpsMsgsNovatelMessageHeaderClass '.loadobj'], strObj.NovatelMsgHeader);
            obj.ExtendedSolutionStatus = feval([obj.NovatelGpsMsgsNovatelExtendedSolutionStatusClass '.loadobj'], strObj.ExtendedSolutionStatus);
            obj.SignalMask = feval([obj.NovatelGpsMsgsNovatelSignalMaskClass '.loadobj'], strObj.SignalMask);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SolutionStatus = obj.SolutionStatus;
            strObj.PositionType = obj.PositionType;
            strObj.BaselineLength = obj.BaselineLength;
            strObj.Heading = obj.Heading;
            strObj.Pitch = obj.Pitch;
            strObj.HeadingSigma = obj.HeadingSigma;
            strObj.PitchSigma = obj.PitchSigma;
            strObj.RoverStationId = obj.RoverStationId;
            strObj.MasterStationId = obj.MasterStationId;
            strObj.NumSatellitesTracked = obj.NumSatellitesTracked;
            strObj.NumSatellitesUsedInSolution = obj.NumSatellitesUsedInSolution;
            strObj.NumSatellitesAboveElevationMaskAngle = obj.NumSatellitesAboveElevationMaskAngle;
            strObj.NumSatellitesAboveElevationMaskAngleL2 = obj.NumSatellitesAboveElevationMaskAngleL2;
            strObj.SolutionSource = obj.SolutionSource;
            strObj.Header = saveobj(obj.Header);
            strObj.NovatelMsgHeader = saveobj(obj.NovatelMsgHeader);
            strObj.ExtendedSolutionStatus = saveobj(obj.ExtendedSolutionStatus);
            strObj.SignalMask = saveobj(obj.SignalMask);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.NovatelHeading2.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.NovatelHeading2;
            obj.reload(strObj);
        end
    end
end
