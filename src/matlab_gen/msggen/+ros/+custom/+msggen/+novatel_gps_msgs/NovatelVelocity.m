classdef NovatelVelocity < ros.Message
    %NovatelVelocity MATLAB implementation of novatel_gps_msgs/NovatelVelocity
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/NovatelVelocity' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'a8fb7d9232aaf68f98caa2b4cda2597b' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        NovatelGpsMsgsNovatelMessageHeaderClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelMessageHeader') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelMessageHeader
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        NovatelMsgHeader
        SolutionStatus
        VelocityType
        Latency
        Age
        HorizontalSpeed
        TrackGround
        VerticalSpeed
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'NovatelMsgHeader', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Age', 'Header', 'HorizontalSpeed', 'Latency', 'NovatelMsgHeader', 'SolutionStatus', 'TrackGround', 'VelocityType', 'VerticalSpeed'} % List of non-constant message properties
        ROSPropertyList = {'age', 'header', 'horizontal_speed', 'latency', 'novatel_msg_header', 'solution_status', 'track_ground', 'velocity_type', 'vertical_speed'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = NovatelVelocity(msg)
            %NovatelVelocity Construct the message object NovatelVelocity
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'NovatelVelocity', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function novatelmsgheader = get.NovatelMsgHeader(obj)
            %get.NovatelMsgHeader Get the value for property NovatelMsgHeader
            if isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader = feval(obj.NovatelGpsMsgsNovatelMessageHeaderClass, obj.JavaMessage.getNovatelMsgHeader);
            end
            novatelmsgheader = obj.Cache.NovatelMsgHeader;
        end
        
        function set.NovatelMsgHeader(obj, novatelmsgheader)
            %set.NovatelMsgHeader Set the value for property NovatelMsgHeader
            validateattributes(novatelmsgheader, {obj.NovatelGpsMsgsNovatelMessageHeaderClass}, {'nonempty', 'scalar'}, 'NovatelVelocity', 'NovatelMsgHeader');
            
            obj.JavaMessage.setNovatelMsgHeader(novatelmsgheader.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader.setJavaObject(novatelmsgheader.getJavaObject);
            end
        end
        
        function solutionstatus = get.SolutionStatus(obj)
            %get.SolutionStatus Get the value for property SolutionStatus
            solutionstatus = char(obj.JavaMessage.getSolutionStatus);
        end
        
        function set.SolutionStatus(obj, solutionstatus)
            %set.SolutionStatus Set the value for property SolutionStatus
            solutionstatus = convertStringsToChars(solutionstatus);
            
            validateattributes(solutionstatus, {'char', 'string'}, {}, 'NovatelVelocity', 'SolutionStatus');
            
            obj.JavaMessage.setSolutionStatus(solutionstatus);
        end
        
        function velocitytype = get.VelocityType(obj)
            %get.VelocityType Get the value for property VelocityType
            velocitytype = char(obj.JavaMessage.getVelocityType);
        end
        
        function set.VelocityType(obj, velocitytype)
            %set.VelocityType Set the value for property VelocityType
            velocitytype = convertStringsToChars(velocitytype);
            
            validateattributes(velocitytype, {'char', 'string'}, {}, 'NovatelVelocity', 'VelocityType');
            
            obj.JavaMessage.setVelocityType(velocitytype);
        end
        
        function latency = get.Latency(obj)
            %get.Latency Get the value for property Latency
            latency = single(obj.JavaMessage.getLatency);
        end
        
        function set.Latency(obj, latency)
            %set.Latency Set the value for property Latency
            validateattributes(latency, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelVelocity', 'Latency');
            
            obj.JavaMessage.setLatency(latency);
        end
        
        function age = get.Age(obj)
            %get.Age Get the value for property Age
            age = single(obj.JavaMessage.getAge);
        end
        
        function set.Age(obj, age)
            %set.Age Set the value for property Age
            validateattributes(age, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelVelocity', 'Age');
            
            obj.JavaMessage.setAge(age);
        end
        
        function horizontalspeed = get.HorizontalSpeed(obj)
            %get.HorizontalSpeed Get the value for property HorizontalSpeed
            horizontalspeed = double(obj.JavaMessage.getHorizontalSpeed);
        end
        
        function set.HorizontalSpeed(obj, horizontalspeed)
            %set.HorizontalSpeed Set the value for property HorizontalSpeed
            validateattributes(horizontalspeed, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelVelocity', 'HorizontalSpeed');
            
            obj.JavaMessage.setHorizontalSpeed(horizontalspeed);
        end
        
        function trackground = get.TrackGround(obj)
            %get.TrackGround Get the value for property TrackGround
            trackground = double(obj.JavaMessage.getTrackGround);
        end
        
        function set.TrackGround(obj, trackground)
            %set.TrackGround Set the value for property TrackGround
            validateattributes(trackground, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelVelocity', 'TrackGround');
            
            obj.JavaMessage.setTrackGround(trackground);
        end
        
        function verticalspeed = get.VerticalSpeed(obj)
            %get.VerticalSpeed Get the value for property VerticalSpeed
            verticalspeed = double(obj.JavaMessage.getVerticalSpeed);
        end
        
        function set.VerticalSpeed(obj, verticalspeed)
            %set.VerticalSpeed Set the value for property VerticalSpeed
            validateattributes(verticalspeed, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelVelocity', 'VerticalSpeed');
            
            obj.JavaMessage.setVerticalSpeed(verticalspeed);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.NovatelMsgHeader = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SolutionStatus = obj.SolutionStatus;
            cpObj.VelocityType = obj.VelocityType;
            cpObj.Latency = obj.Latency;
            cpObj.Age = obj.Age;
            cpObj.HorizontalSpeed = obj.HorizontalSpeed;
            cpObj.TrackGround = obj.TrackGround;
            cpObj.VerticalSpeed = obj.VerticalSpeed;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.NovatelMsgHeader = copy(obj.NovatelMsgHeader);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SolutionStatus = strObj.SolutionStatus;
            obj.VelocityType = strObj.VelocityType;
            obj.Latency = strObj.Latency;
            obj.Age = strObj.Age;
            obj.HorizontalSpeed = strObj.HorizontalSpeed;
            obj.TrackGround = strObj.TrackGround;
            obj.VerticalSpeed = strObj.VerticalSpeed;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.NovatelMsgHeader = feval([obj.NovatelGpsMsgsNovatelMessageHeaderClass '.loadobj'], strObj.NovatelMsgHeader);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SolutionStatus = obj.SolutionStatus;
            strObj.VelocityType = obj.VelocityType;
            strObj.Latency = obj.Latency;
            strObj.Age = obj.Age;
            strObj.HorizontalSpeed = obj.HorizontalSpeed;
            strObj.TrackGround = obj.TrackGround;
            strObj.VerticalSpeed = obj.VerticalSpeed;
            strObj.Header = saveobj(obj.Header);
            strObj.NovatelMsgHeader = saveobj(obj.NovatelMsgHeader);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.NovatelVelocity.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.NovatelVelocity;
            obj.reload(strObj);
        end
    end
end
