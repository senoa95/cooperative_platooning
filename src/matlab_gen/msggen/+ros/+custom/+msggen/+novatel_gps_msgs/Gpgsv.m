classdef Gpgsv < ros.Message
    %Gpgsv MATLAB implementation of novatel_gps_msgs/Gpgsv
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/Gpgsv' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '6f34bebc32fe085313c942a96fd39c77' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        NovatelGpsMsgsSatelliteClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/Satellite') % Dispatch to MATLAB class for message type novatel_gps_msgs/Satellite
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        MessageId
        NMsgs
        MsgNumber
        NSatellites
        Satellites
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Satellites', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'MessageId', 'MsgNumber', 'NMsgs', 'NSatellites', 'Satellites'} % List of non-constant message properties
        ROSPropertyList = {'header', 'message_id', 'msg_number', 'n_msgs', 'n_satellites', 'satellites'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Gpgsv(msg)
            %Gpgsv Construct the message object Gpgsv
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Gpgsv', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function messageid = get.MessageId(obj)
            %get.MessageId Get the value for property MessageId
            messageid = char(obj.JavaMessage.getMessageId);
        end
        
        function set.MessageId(obj, messageid)
            %set.MessageId Set the value for property MessageId
            messageid = convertStringsToChars(messageid);
            
            validateattributes(messageid, {'char', 'string'}, {}, 'Gpgsv', 'MessageId');
            
            obj.JavaMessage.setMessageId(messageid);
        end
        
        function nmsgs = get.NMsgs(obj)
            %get.NMsgs Get the value for property NMsgs
            nmsgs = typecast(int8(obj.JavaMessage.getNMsgs), 'uint8');
        end
        
        function set.NMsgs(obj, nmsgs)
            %set.NMsgs Set the value for property NMsgs
            validateattributes(nmsgs, {'numeric'}, {'nonempty', 'scalar'}, 'Gpgsv', 'NMsgs');
            
            obj.JavaMessage.setNMsgs(nmsgs);
        end
        
        function msgnumber = get.MsgNumber(obj)
            %get.MsgNumber Get the value for property MsgNumber
            msgnumber = typecast(int8(obj.JavaMessage.getMsgNumber), 'uint8');
        end
        
        function set.MsgNumber(obj, msgnumber)
            %set.MsgNumber Set the value for property MsgNumber
            validateattributes(msgnumber, {'numeric'}, {'nonempty', 'scalar'}, 'Gpgsv', 'MsgNumber');
            
            obj.JavaMessage.setMsgNumber(msgnumber);
        end
        
        function nsatellites = get.NSatellites(obj)
            %get.NSatellites Get the value for property NSatellites
            nsatellites = typecast(int8(obj.JavaMessage.getNSatellites), 'uint8');
        end
        
        function set.NSatellites(obj, nsatellites)
            %set.NSatellites Set the value for property NSatellites
            validateattributes(nsatellites, {'numeric'}, {'nonempty', 'scalar'}, 'Gpgsv', 'NSatellites');
            
            obj.JavaMessage.setNSatellites(nsatellites);
        end
        
        function satellites = get.Satellites(obj)
            %get.Satellites Get the value for property Satellites
            if isempty(obj.Cache.Satellites)
                javaArray = obj.JavaMessage.getSatellites;
                array = obj.readJavaArray(javaArray, obj.NovatelGpsMsgsSatelliteClass);
                obj.Cache.Satellites = feval(obj.NovatelGpsMsgsSatelliteClass, array);
            end
            satellites = obj.Cache.Satellites;
        end
        
        function set.Satellites(obj, satellites)
            %set.Satellites Set the value for property Satellites
            if ~isvector(satellites) && isempty(satellites)
                % Allow empty [] input
                satellites = feval([obj.NovatelGpsMsgsSatelliteClass '.empty'], 0, 1);
            end
            
            validateattributes(satellites, {obj.NovatelGpsMsgsSatelliteClass}, {'vector'}, 'Gpgsv', 'Satellites');
            
            javaArray = obj.JavaMessage.getSatellites;
            array = obj.writeJavaArray(satellites, javaArray, obj.NovatelGpsMsgsSatelliteClass);
            obj.JavaMessage.setSatellites(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Satellites)
                obj.Cache.Satellites = [];
                obj.Cache.Satellites = obj.Satellites;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Satellites = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.MessageId = obj.MessageId;
            cpObj.NMsgs = obj.NMsgs;
            cpObj.MsgNumber = obj.MsgNumber;
            cpObj.NSatellites = obj.NSatellites;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Satellites = copy(obj.Satellites);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.MessageId = strObj.MessageId;
            obj.NMsgs = strObj.NMsgs;
            obj.MsgNumber = strObj.MsgNumber;
            obj.NSatellites = strObj.NSatellites;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            SatellitesCell = arrayfun(@(x) feval([obj.NovatelGpsMsgsSatelliteClass '.loadobj'], x), strObj.Satellites, 'UniformOutput', false);
            obj.Satellites = vertcat(SatellitesCell{:});
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.MessageId = obj.MessageId;
            strObj.NMsgs = obj.NMsgs;
            strObj.MsgNumber = obj.MsgNumber;
            strObj.NSatellites = obj.NSatellites;
            strObj.Header = saveobj(obj.Header);
            strObj.Satellites = arrayfun(@(x) saveobj(x), obj.Satellites);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.Gpgsv.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.Gpgsv;
            obj.reload(strObj);
        end
    end
end
