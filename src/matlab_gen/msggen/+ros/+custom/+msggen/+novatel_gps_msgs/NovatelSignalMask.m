classdef NovatelSignalMask < ros.Message
    %NovatelSignalMask MATLAB implementation of novatel_gps_msgs/NovatelSignalMask
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/NovatelSignalMask' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '007d687355f8f3c12ea4e18109172710' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        OriginalMask
        GpsL1UsedInSolution
        GpsL2UsedInSolution
        GpsL3UsedInSolution
        GlonassL1UsedInSolution
        GlonassL2UsedInSolution
    end
    
    properties (Constant, Hidden)
        PropertyList = {'GlonassL1UsedInSolution', 'GlonassL2UsedInSolution', 'GpsL1UsedInSolution', 'GpsL2UsedInSolution', 'GpsL3UsedInSolution', 'OriginalMask'} % List of non-constant message properties
        ROSPropertyList = {'glonass_L1_used_in_solution', 'glonass_L2_used_in_solution', 'gps_L1_used_in_solution', 'gps_L2_used_in_solution', 'gps_L3_used_in_solution', 'original_mask'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = NovatelSignalMask(msg)
            %NovatelSignalMask Construct the message object NovatelSignalMask
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function originalmask = get.OriginalMask(obj)
            %get.OriginalMask Get the value for property OriginalMask
            originalmask = typecast(int32(obj.JavaMessage.getOriginalMask), 'uint32');
        end
        
        function set.OriginalMask(obj, originalmask)
            %set.OriginalMask Set the value for property OriginalMask
            validateattributes(originalmask, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelSignalMask', 'OriginalMask');
            
            obj.JavaMessage.setOriginalMask(originalmask);
        end
        
        function gpsl1usedinsolution = get.GpsL1UsedInSolution(obj)
            %get.GpsL1UsedInSolution Get the value for property GpsL1UsedInSolution
            gpsl1usedinsolution = logical(obj.JavaMessage.getGpsL1UsedInSolution);
        end
        
        function set.GpsL1UsedInSolution(obj, gpsl1usedinsolution)
            %set.GpsL1UsedInSolution Set the value for property GpsL1UsedInSolution
            validateattributes(gpsl1usedinsolution, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelSignalMask', 'GpsL1UsedInSolution');
            
            obj.JavaMessage.setGpsL1UsedInSolution(gpsl1usedinsolution);
        end
        
        function gpsl2usedinsolution = get.GpsL2UsedInSolution(obj)
            %get.GpsL2UsedInSolution Get the value for property GpsL2UsedInSolution
            gpsl2usedinsolution = logical(obj.JavaMessage.getGpsL2UsedInSolution);
        end
        
        function set.GpsL2UsedInSolution(obj, gpsl2usedinsolution)
            %set.GpsL2UsedInSolution Set the value for property GpsL2UsedInSolution
            validateattributes(gpsl2usedinsolution, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelSignalMask', 'GpsL2UsedInSolution');
            
            obj.JavaMessage.setGpsL2UsedInSolution(gpsl2usedinsolution);
        end
        
        function gpsl3usedinsolution = get.GpsL3UsedInSolution(obj)
            %get.GpsL3UsedInSolution Get the value for property GpsL3UsedInSolution
            gpsl3usedinsolution = logical(obj.JavaMessage.getGpsL3UsedInSolution);
        end
        
        function set.GpsL3UsedInSolution(obj, gpsl3usedinsolution)
            %set.GpsL3UsedInSolution Set the value for property GpsL3UsedInSolution
            validateattributes(gpsl3usedinsolution, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelSignalMask', 'GpsL3UsedInSolution');
            
            obj.JavaMessage.setGpsL3UsedInSolution(gpsl3usedinsolution);
        end
        
        function glonassl1usedinsolution = get.GlonassL1UsedInSolution(obj)
            %get.GlonassL1UsedInSolution Get the value for property GlonassL1UsedInSolution
            glonassl1usedinsolution = logical(obj.JavaMessage.getGlonassL1UsedInSolution);
        end
        
        function set.GlonassL1UsedInSolution(obj, glonassl1usedinsolution)
            %set.GlonassL1UsedInSolution Set the value for property GlonassL1UsedInSolution
            validateattributes(glonassl1usedinsolution, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelSignalMask', 'GlonassL1UsedInSolution');
            
            obj.JavaMessage.setGlonassL1UsedInSolution(glonassl1usedinsolution);
        end
        
        function glonassl2usedinsolution = get.GlonassL2UsedInSolution(obj)
            %get.GlonassL2UsedInSolution Get the value for property GlonassL2UsedInSolution
            glonassl2usedinsolution = logical(obj.JavaMessage.getGlonassL2UsedInSolution);
        end
        
        function set.GlonassL2UsedInSolution(obj, glonassl2usedinsolution)
            %set.GlonassL2UsedInSolution Set the value for property GlonassL2UsedInSolution
            validateattributes(glonassl2usedinsolution, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelSignalMask', 'GlonassL2UsedInSolution');
            
            obj.JavaMessage.setGlonassL2UsedInSolution(glonassl2usedinsolution);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.OriginalMask = obj.OriginalMask;
            cpObj.GpsL1UsedInSolution = obj.GpsL1UsedInSolution;
            cpObj.GpsL2UsedInSolution = obj.GpsL2UsedInSolution;
            cpObj.GpsL3UsedInSolution = obj.GpsL3UsedInSolution;
            cpObj.GlonassL1UsedInSolution = obj.GlonassL1UsedInSolution;
            cpObj.GlonassL2UsedInSolution = obj.GlonassL2UsedInSolution;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.OriginalMask = strObj.OriginalMask;
            obj.GpsL1UsedInSolution = strObj.GpsL1UsedInSolution;
            obj.GpsL2UsedInSolution = strObj.GpsL2UsedInSolution;
            obj.GpsL3UsedInSolution = strObj.GpsL3UsedInSolution;
            obj.GlonassL1UsedInSolution = strObj.GlonassL1UsedInSolution;
            obj.GlonassL2UsedInSolution = strObj.GlonassL2UsedInSolution;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.OriginalMask = obj.OriginalMask;
            strObj.GpsL1UsedInSolution = obj.GpsL1UsedInSolution;
            strObj.GpsL2UsedInSolution = obj.GpsL2UsedInSolution;
            strObj.GpsL3UsedInSolution = obj.GpsL3UsedInSolution;
            strObj.GlonassL1UsedInSolution = obj.GlonassL1UsedInSolution;
            strObj.GlonassL2UsedInSolution = obj.GlonassL2UsedInSolution;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.NovatelSignalMask.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.NovatelSignalMask;
            obj.reload(strObj);
        end
    end
end
