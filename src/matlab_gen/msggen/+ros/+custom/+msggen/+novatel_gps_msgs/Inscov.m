classdef Inscov < ros.Message
    %Inscov MATLAB implementation of novatel_gps_msgs/Inscov
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/Inscov' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'a4ae1586410fc24e8ab4019825bb8bdd' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        NovatelGpsMsgsNovatelMessageHeaderClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelMessageHeader') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelMessageHeader
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        NovatelMsgHeader
        Week
        Seconds
        PositionCovariance
        AttitudeCovariance
        VelocityCovariance
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'NovatelMsgHeader', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AttitudeCovariance', 'Header', 'NovatelMsgHeader', 'PositionCovariance', 'Seconds', 'VelocityCovariance', 'Week'} % List of non-constant message properties
        ROSPropertyList = {'attitude_covariance', 'header', 'novatel_msg_header', 'position_covariance', 'seconds', 'velocity_covariance', 'week'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Inscov(msg)
            %Inscov Construct the message object Inscov
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Inscov', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function novatelmsgheader = get.NovatelMsgHeader(obj)
            %get.NovatelMsgHeader Get the value for property NovatelMsgHeader
            if isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader = feval(obj.NovatelGpsMsgsNovatelMessageHeaderClass, obj.JavaMessage.getNovatelMsgHeader);
            end
            novatelmsgheader = obj.Cache.NovatelMsgHeader;
        end
        
        function set.NovatelMsgHeader(obj, novatelmsgheader)
            %set.NovatelMsgHeader Set the value for property NovatelMsgHeader
            validateattributes(novatelmsgheader, {obj.NovatelGpsMsgsNovatelMessageHeaderClass}, {'nonempty', 'scalar'}, 'Inscov', 'NovatelMsgHeader');
            
            obj.JavaMessage.setNovatelMsgHeader(novatelmsgheader.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader.setJavaObject(novatelmsgheader.getJavaObject);
            end
        end
        
        function week = get.Week(obj)
            %get.Week Get the value for property Week
            week = typecast(int32(obj.JavaMessage.getWeek), 'uint32');
        end
        
        function set.Week(obj, week)
            %set.Week Set the value for property Week
            validateattributes(week, {'numeric'}, {'nonempty', 'scalar'}, 'Inscov', 'Week');
            
            obj.JavaMessage.setWeek(week);
        end
        
        function seconds = get.Seconds(obj)
            %get.Seconds Get the value for property Seconds
            seconds = double(obj.JavaMessage.getSeconds);
        end
        
        function set.Seconds(obj, seconds)
            %set.Seconds Set the value for property Seconds
            validateattributes(seconds, {'numeric'}, {'nonempty', 'scalar'}, 'Inscov', 'Seconds');
            
            obj.JavaMessage.setSeconds(seconds);
        end
        
        function positioncovariance = get.PositionCovariance(obj)
            %get.PositionCovariance Get the value for property PositionCovariance
            javaArray = obj.JavaMessage.getPositionCovariance;
            array = obj.readJavaArray(javaArray, 'double');
            positioncovariance = double(array);
        end
        
        function set.PositionCovariance(obj, positioncovariance)
            %set.PositionCovariance Set the value for property PositionCovariance
            validateattributes(positioncovariance, {'numeric'}, {'vector', 'numel', 9}, 'Inscov', 'PositionCovariance');
            
            javaArray = obj.JavaMessage.getPositionCovariance;
            array = obj.writeJavaArray(positioncovariance, javaArray, 'double');
            obj.JavaMessage.setPositionCovariance(array);
        end
        
        function attitudecovariance = get.AttitudeCovariance(obj)
            %get.AttitudeCovariance Get the value for property AttitudeCovariance
            javaArray = obj.JavaMessage.getAttitudeCovariance;
            array = obj.readJavaArray(javaArray, 'double');
            attitudecovariance = double(array);
        end
        
        function set.AttitudeCovariance(obj, attitudecovariance)
            %set.AttitudeCovariance Set the value for property AttitudeCovariance
            validateattributes(attitudecovariance, {'numeric'}, {'vector', 'numel', 9}, 'Inscov', 'AttitudeCovariance');
            
            javaArray = obj.JavaMessage.getAttitudeCovariance;
            array = obj.writeJavaArray(attitudecovariance, javaArray, 'double');
            obj.JavaMessage.setAttitudeCovariance(array);
        end
        
        function velocitycovariance = get.VelocityCovariance(obj)
            %get.VelocityCovariance Get the value for property VelocityCovariance
            javaArray = obj.JavaMessage.getVelocityCovariance;
            array = obj.readJavaArray(javaArray, 'double');
            velocitycovariance = double(array);
        end
        
        function set.VelocityCovariance(obj, velocitycovariance)
            %set.VelocityCovariance Set the value for property VelocityCovariance
            validateattributes(velocitycovariance, {'numeric'}, {'vector', 'numel', 9}, 'Inscov', 'VelocityCovariance');
            
            javaArray = obj.JavaMessage.getVelocityCovariance;
            array = obj.writeJavaArray(velocitycovariance, javaArray, 'double');
            obj.JavaMessage.setVelocityCovariance(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.NovatelMsgHeader = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Week = obj.Week;
            cpObj.Seconds = obj.Seconds;
            cpObj.PositionCovariance = obj.PositionCovariance;
            cpObj.AttitudeCovariance = obj.AttitudeCovariance;
            cpObj.VelocityCovariance = obj.VelocityCovariance;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.NovatelMsgHeader = copy(obj.NovatelMsgHeader);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Week = strObj.Week;
            obj.Seconds = strObj.Seconds;
            obj.PositionCovariance = strObj.PositionCovariance;
            obj.AttitudeCovariance = strObj.AttitudeCovariance;
            obj.VelocityCovariance = strObj.VelocityCovariance;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.NovatelMsgHeader = feval([obj.NovatelGpsMsgsNovatelMessageHeaderClass '.loadobj'], strObj.NovatelMsgHeader);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Week = obj.Week;
            strObj.Seconds = obj.Seconds;
            strObj.PositionCovariance = obj.PositionCovariance;
            strObj.AttitudeCovariance = obj.AttitudeCovariance;
            strObj.VelocityCovariance = obj.VelocityCovariance;
            strObj.Header = saveobj(obj.Header);
            strObj.NovatelMsgHeader = saveobj(obj.NovatelMsgHeader);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.Inscov.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.Inscov;
            obj.reload(strObj);
        end
    end
end
