classdef RangeInformation < ros.Message
    %RangeInformation MATLAB implementation of novatel_gps_msgs/RangeInformation
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/RangeInformation' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '2c29299d245fc707e8f7544af871f110' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        PrnNumber
        Glofreq
        Psr
        PsrStd
        Adr
        AdrStd
        Dopp
        NoiseDensityRatio
        Locktime
        TrackingStatus
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Adr', 'AdrStd', 'Dopp', 'Glofreq', 'Locktime', 'NoiseDensityRatio', 'PrnNumber', 'Psr', 'PsrStd', 'TrackingStatus'} % List of non-constant message properties
        ROSPropertyList = {'adr', 'adr_std', 'dopp', 'glofreq', 'locktime', 'noise_density_ratio', 'prn_number', 'psr', 'psr_std', 'tracking_status'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = RangeInformation(msg)
            %RangeInformation Construct the message object RangeInformation
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function prnnumber = get.PrnNumber(obj)
            %get.PrnNumber Get the value for property PrnNumber
            prnnumber = typecast(int16(obj.JavaMessage.getPrnNumber), 'uint16');
        end
        
        function set.PrnNumber(obj, prnnumber)
            %set.PrnNumber Set the value for property PrnNumber
            validateattributes(prnnumber, {'numeric'}, {'nonempty', 'scalar'}, 'RangeInformation', 'PrnNumber');
            
            obj.JavaMessage.setPrnNumber(prnnumber);
        end
        
        function glofreq = get.Glofreq(obj)
            %get.Glofreq Get the value for property Glofreq
            glofreq = typecast(int16(obj.JavaMessage.getGlofreq), 'uint16');
        end
        
        function set.Glofreq(obj, glofreq)
            %set.Glofreq Set the value for property Glofreq
            validateattributes(glofreq, {'numeric'}, {'nonempty', 'scalar'}, 'RangeInformation', 'Glofreq');
            
            obj.JavaMessage.setGlofreq(glofreq);
        end
        
        function psr = get.Psr(obj)
            %get.Psr Get the value for property Psr
            psr = double(obj.JavaMessage.getPsr);
        end
        
        function set.Psr(obj, psr)
            %set.Psr Set the value for property Psr
            validateattributes(psr, {'numeric'}, {'nonempty', 'scalar'}, 'RangeInformation', 'Psr');
            
            obj.JavaMessage.setPsr(psr);
        end
        
        function psrstd = get.PsrStd(obj)
            %get.PsrStd Get the value for property PsrStd
            psrstd = single(obj.JavaMessage.getPsrStd);
        end
        
        function set.PsrStd(obj, psrstd)
            %set.PsrStd Set the value for property PsrStd
            validateattributes(psrstd, {'numeric'}, {'nonempty', 'scalar'}, 'RangeInformation', 'PsrStd');
            
            obj.JavaMessage.setPsrStd(psrstd);
        end
        
        function adr = get.Adr(obj)
            %get.Adr Get the value for property Adr
            adr = double(obj.JavaMessage.getAdr);
        end
        
        function set.Adr(obj, adr)
            %set.Adr Set the value for property Adr
            validateattributes(adr, {'numeric'}, {'nonempty', 'scalar'}, 'RangeInformation', 'Adr');
            
            obj.JavaMessage.setAdr(adr);
        end
        
        function adrstd = get.AdrStd(obj)
            %get.AdrStd Get the value for property AdrStd
            adrstd = single(obj.JavaMessage.getAdrStd);
        end
        
        function set.AdrStd(obj, adrstd)
            %set.AdrStd Set the value for property AdrStd
            validateattributes(adrstd, {'numeric'}, {'nonempty', 'scalar'}, 'RangeInformation', 'AdrStd');
            
            obj.JavaMessage.setAdrStd(adrstd);
        end
        
        function dopp = get.Dopp(obj)
            %get.Dopp Get the value for property Dopp
            dopp = single(obj.JavaMessage.getDopp);
        end
        
        function set.Dopp(obj, dopp)
            %set.Dopp Set the value for property Dopp
            validateattributes(dopp, {'numeric'}, {'nonempty', 'scalar'}, 'RangeInformation', 'Dopp');
            
            obj.JavaMessage.setDopp(dopp);
        end
        
        function noisedensityratio = get.NoiseDensityRatio(obj)
            %get.NoiseDensityRatio Get the value for property NoiseDensityRatio
            noisedensityratio = single(obj.JavaMessage.getNoiseDensityRatio);
        end
        
        function set.NoiseDensityRatio(obj, noisedensityratio)
            %set.NoiseDensityRatio Set the value for property NoiseDensityRatio
            validateattributes(noisedensityratio, {'numeric'}, {'nonempty', 'scalar'}, 'RangeInformation', 'NoiseDensityRatio');
            
            obj.JavaMessage.setNoiseDensityRatio(noisedensityratio);
        end
        
        function locktime = get.Locktime(obj)
            %get.Locktime Get the value for property Locktime
            locktime = single(obj.JavaMessage.getLocktime);
        end
        
        function set.Locktime(obj, locktime)
            %set.Locktime Set the value for property Locktime
            validateattributes(locktime, {'numeric'}, {'nonempty', 'scalar'}, 'RangeInformation', 'Locktime');
            
            obj.JavaMessage.setLocktime(locktime);
        end
        
        function trackingstatus = get.TrackingStatus(obj)
            %get.TrackingStatus Get the value for property TrackingStatus
            trackingstatus = typecast(int32(obj.JavaMessage.getTrackingStatus), 'uint32');
        end
        
        function set.TrackingStatus(obj, trackingstatus)
            %set.TrackingStatus Set the value for property TrackingStatus
            validateattributes(trackingstatus, {'numeric'}, {'nonempty', 'scalar'}, 'RangeInformation', 'TrackingStatus');
            
            obj.JavaMessage.setTrackingStatus(trackingstatus);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.PrnNumber = obj.PrnNumber;
            cpObj.Glofreq = obj.Glofreq;
            cpObj.Psr = obj.Psr;
            cpObj.PsrStd = obj.PsrStd;
            cpObj.Adr = obj.Adr;
            cpObj.AdrStd = obj.AdrStd;
            cpObj.Dopp = obj.Dopp;
            cpObj.NoiseDensityRatio = obj.NoiseDensityRatio;
            cpObj.Locktime = obj.Locktime;
            cpObj.TrackingStatus = obj.TrackingStatus;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.PrnNumber = strObj.PrnNumber;
            obj.Glofreq = strObj.Glofreq;
            obj.Psr = strObj.Psr;
            obj.PsrStd = strObj.PsrStd;
            obj.Adr = strObj.Adr;
            obj.AdrStd = strObj.AdrStd;
            obj.Dopp = strObj.Dopp;
            obj.NoiseDensityRatio = strObj.NoiseDensityRatio;
            obj.Locktime = strObj.Locktime;
            obj.TrackingStatus = strObj.TrackingStatus;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.PrnNumber = obj.PrnNumber;
            strObj.Glofreq = obj.Glofreq;
            strObj.Psr = obj.Psr;
            strObj.PsrStd = obj.PsrStd;
            strObj.Adr = obj.Adr;
            strObj.AdrStd = obj.AdrStd;
            strObj.Dopp = obj.Dopp;
            strObj.NoiseDensityRatio = obj.NoiseDensityRatio;
            strObj.Locktime = obj.Locktime;
            strObj.TrackingStatus = obj.TrackingStatus;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.RangeInformation.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.RangeInformation;
            obj.reload(strObj);
        end
    end
end
