classdef Gpgga < ros.Message
    %Gpgga MATLAB implementation of novatel_gps_msgs/Gpgga
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/Gpgga' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'bc1ad0f59948d0d18a275b656db48121' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        GPSQUALINVALID = uint32(0)
        GPSQUALSINGLEPOINT = uint32(1)
        GPSQUALPSEUDORANGEDIFFERENTIAL = uint32(2)
        GPSQUALRTKFIXEDAMBIGUITYSOLUTION = uint32(4)
        GPSQUALRTKFLOATINGAMBIGUITYSOLUTION = uint32(5)
        GPSQUALDEADRECKONINGMODE = uint32(6)
        GPSQUALMANUALINPUTMODE = uint32(7)
        GPSQUALSIMULATIONMODE = uint32(8)
        GPSQUALWASS = uint32(9)
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        MessageId
        UtcSeconds
        Lat
        Lon
        LatDir
        LonDir
        GpsQual
        NumSats
        Hdop
        Alt
        AltitudeUnits
        Undulation
        UndulationUnits
        DiffAge
        StationId
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Alt', 'AltitudeUnits', 'DiffAge', 'GpsQual', 'Hdop', 'Header', 'Lat', 'LatDir', 'Lon', 'LonDir', 'MessageId', 'NumSats', 'StationId', 'Undulation', 'UndulationUnits', 'UtcSeconds'} % List of non-constant message properties
        ROSPropertyList = {'alt', 'altitude_units', 'diff_age', 'gps_qual', 'hdop', 'header', 'lat', 'lat_dir', 'lon', 'lon_dir', 'message_id', 'num_sats', 'station_id', 'undulation', 'undulation_units', 'utc_seconds'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Gpgga(msg)
            %Gpgga Construct the message object Gpgga
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Gpgga', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function messageid = get.MessageId(obj)
            %get.MessageId Get the value for property MessageId
            messageid = char(obj.JavaMessage.getMessageId);
        end
        
        function set.MessageId(obj, messageid)
            %set.MessageId Set the value for property MessageId
            messageid = convertStringsToChars(messageid);
            
            validateattributes(messageid, {'char', 'string'}, {}, 'Gpgga', 'MessageId');
            
            obj.JavaMessage.setMessageId(messageid);
        end
        
        function utcseconds = get.UtcSeconds(obj)
            %get.UtcSeconds Get the value for property UtcSeconds
            utcseconds = double(obj.JavaMessage.getUtcSeconds);
        end
        
        function set.UtcSeconds(obj, utcseconds)
            %set.UtcSeconds Set the value for property UtcSeconds
            validateattributes(utcseconds, {'numeric'}, {'nonempty', 'scalar'}, 'Gpgga', 'UtcSeconds');
            
            obj.JavaMessage.setUtcSeconds(utcseconds);
        end
        
        function lat = get.Lat(obj)
            %get.Lat Get the value for property Lat
            lat = double(obj.JavaMessage.getLat);
        end
        
        function set.Lat(obj, lat)
            %set.Lat Set the value for property Lat
            validateattributes(lat, {'numeric'}, {'nonempty', 'scalar'}, 'Gpgga', 'Lat');
            
            obj.JavaMessage.setLat(lat);
        end
        
        function lon = get.Lon(obj)
            %get.Lon Get the value for property Lon
            lon = double(obj.JavaMessage.getLon);
        end
        
        function set.Lon(obj, lon)
            %set.Lon Set the value for property Lon
            validateattributes(lon, {'numeric'}, {'nonempty', 'scalar'}, 'Gpgga', 'Lon');
            
            obj.JavaMessage.setLon(lon);
        end
        
        function latdir = get.LatDir(obj)
            %get.LatDir Get the value for property LatDir
            latdir = char(obj.JavaMessage.getLatDir);
        end
        
        function set.LatDir(obj, latdir)
            %set.LatDir Set the value for property LatDir
            latdir = convertStringsToChars(latdir);
            
            validateattributes(latdir, {'char', 'string'}, {}, 'Gpgga', 'LatDir');
            
            obj.JavaMessage.setLatDir(latdir);
        end
        
        function londir = get.LonDir(obj)
            %get.LonDir Get the value for property LonDir
            londir = char(obj.JavaMessage.getLonDir);
        end
        
        function set.LonDir(obj, londir)
            %set.LonDir Set the value for property LonDir
            londir = convertStringsToChars(londir);
            
            validateattributes(londir, {'char', 'string'}, {}, 'Gpgga', 'LonDir');
            
            obj.JavaMessage.setLonDir(londir);
        end
        
        function gpsqual = get.GpsQual(obj)
            %get.GpsQual Get the value for property GpsQual
            gpsqual = typecast(int32(obj.JavaMessage.getGpsQual), 'uint32');
        end
        
        function set.GpsQual(obj, gpsqual)
            %set.GpsQual Set the value for property GpsQual
            validateattributes(gpsqual, {'numeric'}, {'nonempty', 'scalar'}, 'Gpgga', 'GpsQual');
            
            obj.JavaMessage.setGpsQual(gpsqual);
        end
        
        function numsats = get.NumSats(obj)
            %get.NumSats Get the value for property NumSats
            numsats = typecast(int32(obj.JavaMessage.getNumSats), 'uint32');
        end
        
        function set.NumSats(obj, numsats)
            %set.NumSats Set the value for property NumSats
            validateattributes(numsats, {'numeric'}, {'nonempty', 'scalar'}, 'Gpgga', 'NumSats');
            
            obj.JavaMessage.setNumSats(numsats);
        end
        
        function hdop = get.Hdop(obj)
            %get.Hdop Get the value for property Hdop
            hdop = single(obj.JavaMessage.getHdop);
        end
        
        function set.Hdop(obj, hdop)
            %set.Hdop Set the value for property Hdop
            validateattributes(hdop, {'numeric'}, {'nonempty', 'scalar'}, 'Gpgga', 'Hdop');
            
            obj.JavaMessage.setHdop(hdop);
        end
        
        function alt = get.Alt(obj)
            %get.Alt Get the value for property Alt
            alt = single(obj.JavaMessage.getAlt);
        end
        
        function set.Alt(obj, alt)
            %set.Alt Set the value for property Alt
            validateattributes(alt, {'numeric'}, {'nonempty', 'scalar'}, 'Gpgga', 'Alt');
            
            obj.JavaMessage.setAlt(alt);
        end
        
        function altitudeunits = get.AltitudeUnits(obj)
            %get.AltitudeUnits Get the value for property AltitudeUnits
            altitudeunits = char(obj.JavaMessage.getAltitudeUnits);
        end
        
        function set.AltitudeUnits(obj, altitudeunits)
            %set.AltitudeUnits Set the value for property AltitudeUnits
            altitudeunits = convertStringsToChars(altitudeunits);
            
            validateattributes(altitudeunits, {'char', 'string'}, {}, 'Gpgga', 'AltitudeUnits');
            
            obj.JavaMessage.setAltitudeUnits(altitudeunits);
        end
        
        function undulation = get.Undulation(obj)
            %get.Undulation Get the value for property Undulation
            undulation = single(obj.JavaMessage.getUndulation);
        end
        
        function set.Undulation(obj, undulation)
            %set.Undulation Set the value for property Undulation
            validateattributes(undulation, {'numeric'}, {'nonempty', 'scalar'}, 'Gpgga', 'Undulation');
            
            obj.JavaMessage.setUndulation(undulation);
        end
        
        function undulationunits = get.UndulationUnits(obj)
            %get.UndulationUnits Get the value for property UndulationUnits
            undulationunits = char(obj.JavaMessage.getUndulationUnits);
        end
        
        function set.UndulationUnits(obj, undulationunits)
            %set.UndulationUnits Set the value for property UndulationUnits
            undulationunits = convertStringsToChars(undulationunits);
            
            validateattributes(undulationunits, {'char', 'string'}, {}, 'Gpgga', 'UndulationUnits');
            
            obj.JavaMessage.setUndulationUnits(undulationunits);
        end
        
        function diffage = get.DiffAge(obj)
            %get.DiffAge Get the value for property DiffAge
            diffage = typecast(int32(obj.JavaMessage.getDiffAge), 'uint32');
        end
        
        function set.DiffAge(obj, diffage)
            %set.DiffAge Set the value for property DiffAge
            validateattributes(diffage, {'numeric'}, {'nonempty', 'scalar'}, 'Gpgga', 'DiffAge');
            
            obj.JavaMessage.setDiffAge(diffage);
        end
        
        function stationid = get.StationId(obj)
            %get.StationId Get the value for property StationId
            stationid = char(obj.JavaMessage.getStationId);
        end
        
        function set.StationId(obj, stationid)
            %set.StationId Set the value for property StationId
            stationid = convertStringsToChars(stationid);
            
            validateattributes(stationid, {'char', 'string'}, {}, 'Gpgga', 'StationId');
            
            obj.JavaMessage.setStationId(stationid);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.MessageId = obj.MessageId;
            cpObj.UtcSeconds = obj.UtcSeconds;
            cpObj.Lat = obj.Lat;
            cpObj.Lon = obj.Lon;
            cpObj.LatDir = obj.LatDir;
            cpObj.LonDir = obj.LonDir;
            cpObj.GpsQual = obj.GpsQual;
            cpObj.NumSats = obj.NumSats;
            cpObj.Hdop = obj.Hdop;
            cpObj.Alt = obj.Alt;
            cpObj.AltitudeUnits = obj.AltitudeUnits;
            cpObj.Undulation = obj.Undulation;
            cpObj.UndulationUnits = obj.UndulationUnits;
            cpObj.DiffAge = obj.DiffAge;
            cpObj.StationId = obj.StationId;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.MessageId = strObj.MessageId;
            obj.UtcSeconds = strObj.UtcSeconds;
            obj.Lat = strObj.Lat;
            obj.Lon = strObj.Lon;
            obj.LatDir = strObj.LatDir;
            obj.LonDir = strObj.LonDir;
            obj.GpsQual = strObj.GpsQual;
            obj.NumSats = strObj.NumSats;
            obj.Hdop = strObj.Hdop;
            obj.Alt = strObj.Alt;
            obj.AltitudeUnits = strObj.AltitudeUnits;
            obj.Undulation = strObj.Undulation;
            obj.UndulationUnits = strObj.UndulationUnits;
            obj.DiffAge = strObj.DiffAge;
            obj.StationId = strObj.StationId;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.MessageId = obj.MessageId;
            strObj.UtcSeconds = obj.UtcSeconds;
            strObj.Lat = obj.Lat;
            strObj.Lon = obj.Lon;
            strObj.LatDir = obj.LatDir;
            strObj.LonDir = obj.LonDir;
            strObj.GpsQual = obj.GpsQual;
            strObj.NumSats = obj.NumSats;
            strObj.Hdop = obj.Hdop;
            strObj.Alt = obj.Alt;
            strObj.AltitudeUnits = obj.AltitudeUnits;
            strObj.Undulation = obj.Undulation;
            strObj.UndulationUnits = obj.UndulationUnits;
            strObj.DiffAge = obj.DiffAge;
            strObj.StationId = obj.StationId;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.Gpgga.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.Gpgga;
            obj.reload(strObj);
        end
    end
end
