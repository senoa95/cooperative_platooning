classdef NovatelPosition < ros.Message
    %NovatelPosition MATLAB implementation of novatel_gps_msgs/NovatelPosition
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/NovatelPosition' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '16508625c306bc93a852c2381bb2573c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        NovatelGpsMsgsNovatelExtendedSolutionStatusClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelExtendedSolutionStatus') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelExtendedSolutionStatus
        NovatelGpsMsgsNovatelMessageHeaderClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelMessageHeader') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelMessageHeader
        NovatelGpsMsgsNovatelSignalMaskClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelSignalMask') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelSignalMask
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        NovatelMsgHeader
        SolutionStatus
        PositionType
        Lat
        Lon
        Height
        Undulation
        DatumId
        LatSigma
        LonSigma
        HeightSigma
        BaseStationId
        DiffAge
        SolutionAge
        NumSatellitesTracked
        NumSatellitesUsedInSolution
        NumGpsAndGlonassL1UsedInSolution
        NumGpsAndGlonassL1AndL2UsedInSolution
        ExtendedSolutionStatus
        SignalMask
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'NovatelMsgHeader', [], 'ExtendedSolutionStatus', [], 'SignalMask', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'BaseStationId', 'DatumId', 'DiffAge', 'ExtendedSolutionStatus', 'Header', 'Height', 'HeightSigma', 'Lat', 'LatSigma', 'Lon', 'LonSigma', 'NovatelMsgHeader', 'NumGpsAndGlonassL1AndL2UsedInSolution', 'NumGpsAndGlonassL1UsedInSolution', 'NumSatellitesTracked', 'NumSatellitesUsedInSolution', 'PositionType', 'SignalMask', 'SolutionAge', 'SolutionStatus', 'Undulation'} % List of non-constant message properties
        ROSPropertyList = {'base_station_id', 'datum_id', 'diff_age', 'extended_solution_status', 'header', 'height', 'height_sigma', 'lat', 'lat_sigma', 'lon', 'lon_sigma', 'novatel_msg_header', 'num_gps_and_glonass_l1_and_l2_used_in_solution', 'num_gps_and_glonass_l1_used_in_solution', 'num_satellites_tracked', 'num_satellites_used_in_solution', 'position_type', 'signal_mask', 'solution_age', 'solution_status', 'undulation'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = NovatelPosition(msg)
            %NovatelPosition Construct the message object NovatelPosition
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'NovatelPosition', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function novatelmsgheader = get.NovatelMsgHeader(obj)
            %get.NovatelMsgHeader Get the value for property NovatelMsgHeader
            if isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader = feval(obj.NovatelGpsMsgsNovatelMessageHeaderClass, obj.JavaMessage.getNovatelMsgHeader);
            end
            novatelmsgheader = obj.Cache.NovatelMsgHeader;
        end
        
        function set.NovatelMsgHeader(obj, novatelmsgheader)
            %set.NovatelMsgHeader Set the value for property NovatelMsgHeader
            validateattributes(novatelmsgheader, {obj.NovatelGpsMsgsNovatelMessageHeaderClass}, {'nonempty', 'scalar'}, 'NovatelPosition', 'NovatelMsgHeader');
            
            obj.JavaMessage.setNovatelMsgHeader(novatelmsgheader.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader.setJavaObject(novatelmsgheader.getJavaObject);
            end
        end
        
        function solutionstatus = get.SolutionStatus(obj)
            %get.SolutionStatus Get the value for property SolutionStatus
            solutionstatus = char(obj.JavaMessage.getSolutionStatus);
        end
        
        function set.SolutionStatus(obj, solutionstatus)
            %set.SolutionStatus Set the value for property SolutionStatus
            solutionstatus = convertStringsToChars(solutionstatus);
            
            validateattributes(solutionstatus, {'char', 'string'}, {}, 'NovatelPosition', 'SolutionStatus');
            
            obj.JavaMessage.setSolutionStatus(solutionstatus);
        end
        
        function positiontype = get.PositionType(obj)
            %get.PositionType Get the value for property PositionType
            positiontype = char(obj.JavaMessage.getPositionType);
        end
        
        function set.PositionType(obj, positiontype)
            %set.PositionType Set the value for property PositionType
            positiontype = convertStringsToChars(positiontype);
            
            validateattributes(positiontype, {'char', 'string'}, {}, 'NovatelPosition', 'PositionType');
            
            obj.JavaMessage.setPositionType(positiontype);
        end
        
        function lat = get.Lat(obj)
            %get.Lat Get the value for property Lat
            lat = double(obj.JavaMessage.getLat);
        end
        
        function set.Lat(obj, lat)
            %set.Lat Set the value for property Lat
            validateattributes(lat, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelPosition', 'Lat');
            
            obj.JavaMessage.setLat(lat);
        end
        
        function lon = get.Lon(obj)
            %get.Lon Get the value for property Lon
            lon = double(obj.JavaMessage.getLon);
        end
        
        function set.Lon(obj, lon)
            %set.Lon Set the value for property Lon
            validateattributes(lon, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelPosition', 'Lon');
            
            obj.JavaMessage.setLon(lon);
        end
        
        function height = get.Height(obj)
            %get.Height Get the value for property Height
            height = double(obj.JavaMessage.getHeight);
        end
        
        function set.Height(obj, height)
            %set.Height Set the value for property Height
            validateattributes(height, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelPosition', 'Height');
            
            obj.JavaMessage.setHeight(height);
        end
        
        function undulation = get.Undulation(obj)
            %get.Undulation Get the value for property Undulation
            undulation = single(obj.JavaMessage.getUndulation);
        end
        
        function set.Undulation(obj, undulation)
            %set.Undulation Set the value for property Undulation
            validateattributes(undulation, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelPosition', 'Undulation');
            
            obj.JavaMessage.setUndulation(undulation);
        end
        
        function datumid = get.DatumId(obj)
            %get.DatumId Get the value for property DatumId
            datumid = char(obj.JavaMessage.getDatumId);
        end
        
        function set.DatumId(obj, datumid)
            %set.DatumId Set the value for property DatumId
            datumid = convertStringsToChars(datumid);
            
            validateattributes(datumid, {'char', 'string'}, {}, 'NovatelPosition', 'DatumId');
            
            obj.JavaMessage.setDatumId(datumid);
        end
        
        function latsigma = get.LatSigma(obj)
            %get.LatSigma Get the value for property LatSigma
            latsigma = single(obj.JavaMessage.getLatSigma);
        end
        
        function set.LatSigma(obj, latsigma)
            %set.LatSigma Set the value for property LatSigma
            validateattributes(latsigma, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelPosition', 'LatSigma');
            
            obj.JavaMessage.setLatSigma(latsigma);
        end
        
        function lonsigma = get.LonSigma(obj)
            %get.LonSigma Get the value for property LonSigma
            lonsigma = single(obj.JavaMessage.getLonSigma);
        end
        
        function set.LonSigma(obj, lonsigma)
            %set.LonSigma Set the value for property LonSigma
            validateattributes(lonsigma, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelPosition', 'LonSigma');
            
            obj.JavaMessage.setLonSigma(lonsigma);
        end
        
        function heightsigma = get.HeightSigma(obj)
            %get.HeightSigma Get the value for property HeightSigma
            heightsigma = single(obj.JavaMessage.getHeightSigma);
        end
        
        function set.HeightSigma(obj, heightsigma)
            %set.HeightSigma Set the value for property HeightSigma
            validateattributes(heightsigma, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelPosition', 'HeightSigma');
            
            obj.JavaMessage.setHeightSigma(heightsigma);
        end
        
        function basestationid = get.BaseStationId(obj)
            %get.BaseStationId Get the value for property BaseStationId
            basestationid = char(obj.JavaMessage.getBaseStationId);
        end
        
        function set.BaseStationId(obj, basestationid)
            %set.BaseStationId Set the value for property BaseStationId
            basestationid = convertStringsToChars(basestationid);
            
            validateattributes(basestationid, {'char', 'string'}, {}, 'NovatelPosition', 'BaseStationId');
            
            obj.JavaMessage.setBaseStationId(basestationid);
        end
        
        function diffage = get.DiffAge(obj)
            %get.DiffAge Get the value for property DiffAge
            diffage = single(obj.JavaMessage.getDiffAge);
        end
        
        function set.DiffAge(obj, diffage)
            %set.DiffAge Set the value for property DiffAge
            validateattributes(diffage, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelPosition', 'DiffAge');
            
            obj.JavaMessage.setDiffAge(diffage);
        end
        
        function solutionage = get.SolutionAge(obj)
            %get.SolutionAge Get the value for property SolutionAge
            solutionage = single(obj.JavaMessage.getSolutionAge);
        end
        
        function set.SolutionAge(obj, solutionage)
            %set.SolutionAge Set the value for property SolutionAge
            validateattributes(solutionage, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelPosition', 'SolutionAge');
            
            obj.JavaMessage.setSolutionAge(solutionage);
        end
        
        function numsatellitestracked = get.NumSatellitesTracked(obj)
            %get.NumSatellitesTracked Get the value for property NumSatellitesTracked
            numsatellitestracked = typecast(int8(obj.JavaMessage.getNumSatellitesTracked), 'uint8');
        end
        
        function set.NumSatellitesTracked(obj, numsatellitestracked)
            %set.NumSatellitesTracked Set the value for property NumSatellitesTracked
            validateattributes(numsatellitestracked, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelPosition', 'NumSatellitesTracked');
            
            obj.JavaMessage.setNumSatellitesTracked(numsatellitestracked);
        end
        
        function numsatellitesusedinsolution = get.NumSatellitesUsedInSolution(obj)
            %get.NumSatellitesUsedInSolution Get the value for property NumSatellitesUsedInSolution
            numsatellitesusedinsolution = typecast(int8(obj.JavaMessage.getNumSatellitesUsedInSolution), 'uint8');
        end
        
        function set.NumSatellitesUsedInSolution(obj, numsatellitesusedinsolution)
            %set.NumSatellitesUsedInSolution Set the value for property NumSatellitesUsedInSolution
            validateattributes(numsatellitesusedinsolution, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelPosition', 'NumSatellitesUsedInSolution');
            
            obj.JavaMessage.setNumSatellitesUsedInSolution(numsatellitesusedinsolution);
        end
        
        function numgpsandglonassl1usedinsolution = get.NumGpsAndGlonassL1UsedInSolution(obj)
            %get.NumGpsAndGlonassL1UsedInSolution Get the value for property NumGpsAndGlonassL1UsedInSolution
            numgpsandglonassl1usedinsolution = typecast(int8(obj.JavaMessage.getNumGpsAndGlonassL1UsedInSolution), 'uint8');
        end
        
        function set.NumGpsAndGlonassL1UsedInSolution(obj, numgpsandglonassl1usedinsolution)
            %set.NumGpsAndGlonassL1UsedInSolution Set the value for property NumGpsAndGlonassL1UsedInSolution
            validateattributes(numgpsandglonassl1usedinsolution, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelPosition', 'NumGpsAndGlonassL1UsedInSolution');
            
            obj.JavaMessage.setNumGpsAndGlonassL1UsedInSolution(numgpsandglonassl1usedinsolution);
        end
        
        function numgpsandglonassl1andl2usedinsolution = get.NumGpsAndGlonassL1AndL2UsedInSolution(obj)
            %get.NumGpsAndGlonassL1AndL2UsedInSolution Get the value for property NumGpsAndGlonassL1AndL2UsedInSolution
            numgpsandglonassl1andl2usedinsolution = typecast(int8(obj.JavaMessage.getNumGpsAndGlonassL1AndL2UsedInSolution), 'uint8');
        end
        
        function set.NumGpsAndGlonassL1AndL2UsedInSolution(obj, numgpsandglonassl1andl2usedinsolution)
            %set.NumGpsAndGlonassL1AndL2UsedInSolution Set the value for property NumGpsAndGlonassL1AndL2UsedInSolution
            validateattributes(numgpsandglonassl1andl2usedinsolution, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelPosition', 'NumGpsAndGlonassL1AndL2UsedInSolution');
            
            obj.JavaMessage.setNumGpsAndGlonassL1AndL2UsedInSolution(numgpsandglonassl1andl2usedinsolution);
        end
        
        function extendedsolutionstatus = get.ExtendedSolutionStatus(obj)
            %get.ExtendedSolutionStatus Get the value for property ExtendedSolutionStatus
            if isempty(obj.Cache.ExtendedSolutionStatus)
                obj.Cache.ExtendedSolutionStatus = feval(obj.NovatelGpsMsgsNovatelExtendedSolutionStatusClass, obj.JavaMessage.getExtendedSolutionStatus);
            end
            extendedsolutionstatus = obj.Cache.ExtendedSolutionStatus;
        end
        
        function set.ExtendedSolutionStatus(obj, extendedsolutionstatus)
            %set.ExtendedSolutionStatus Set the value for property ExtendedSolutionStatus
            validateattributes(extendedsolutionstatus, {obj.NovatelGpsMsgsNovatelExtendedSolutionStatusClass}, {'nonempty', 'scalar'}, 'NovatelPosition', 'ExtendedSolutionStatus');
            
            obj.JavaMessage.setExtendedSolutionStatus(extendedsolutionstatus.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ExtendedSolutionStatus)
                obj.Cache.ExtendedSolutionStatus.setJavaObject(extendedsolutionstatus.getJavaObject);
            end
        end
        
        function signalmask = get.SignalMask(obj)
            %get.SignalMask Get the value for property SignalMask
            if isempty(obj.Cache.SignalMask)
                obj.Cache.SignalMask = feval(obj.NovatelGpsMsgsNovatelSignalMaskClass, obj.JavaMessage.getSignalMask);
            end
            signalmask = obj.Cache.SignalMask;
        end
        
        function set.SignalMask(obj, signalmask)
            %set.SignalMask Set the value for property SignalMask
            validateattributes(signalmask, {obj.NovatelGpsMsgsNovatelSignalMaskClass}, {'nonempty', 'scalar'}, 'NovatelPosition', 'SignalMask');
            
            obj.JavaMessage.setSignalMask(signalmask.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.SignalMask)
                obj.Cache.SignalMask.setJavaObject(signalmask.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.NovatelMsgHeader = [];
            obj.Cache.ExtendedSolutionStatus = [];
            obj.Cache.SignalMask = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SolutionStatus = obj.SolutionStatus;
            cpObj.PositionType = obj.PositionType;
            cpObj.Lat = obj.Lat;
            cpObj.Lon = obj.Lon;
            cpObj.Height = obj.Height;
            cpObj.Undulation = obj.Undulation;
            cpObj.DatumId = obj.DatumId;
            cpObj.LatSigma = obj.LatSigma;
            cpObj.LonSigma = obj.LonSigma;
            cpObj.HeightSigma = obj.HeightSigma;
            cpObj.BaseStationId = obj.BaseStationId;
            cpObj.DiffAge = obj.DiffAge;
            cpObj.SolutionAge = obj.SolutionAge;
            cpObj.NumSatellitesTracked = obj.NumSatellitesTracked;
            cpObj.NumSatellitesUsedInSolution = obj.NumSatellitesUsedInSolution;
            cpObj.NumGpsAndGlonassL1UsedInSolution = obj.NumGpsAndGlonassL1UsedInSolution;
            cpObj.NumGpsAndGlonassL1AndL2UsedInSolution = obj.NumGpsAndGlonassL1AndL2UsedInSolution;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.NovatelMsgHeader = copy(obj.NovatelMsgHeader);
            cpObj.ExtendedSolutionStatus = copy(obj.ExtendedSolutionStatus);
            cpObj.SignalMask = copy(obj.SignalMask);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SolutionStatus = strObj.SolutionStatus;
            obj.PositionType = strObj.PositionType;
            obj.Lat = strObj.Lat;
            obj.Lon = strObj.Lon;
            obj.Height = strObj.Height;
            obj.Undulation = strObj.Undulation;
            obj.DatumId = strObj.DatumId;
            obj.LatSigma = strObj.LatSigma;
            obj.LonSigma = strObj.LonSigma;
            obj.HeightSigma = strObj.HeightSigma;
            obj.BaseStationId = strObj.BaseStationId;
            obj.DiffAge = strObj.DiffAge;
            obj.SolutionAge = strObj.SolutionAge;
            obj.NumSatellitesTracked = strObj.NumSatellitesTracked;
            obj.NumSatellitesUsedInSolution = strObj.NumSatellitesUsedInSolution;
            obj.NumGpsAndGlonassL1UsedInSolution = strObj.NumGpsAndGlonassL1UsedInSolution;
            obj.NumGpsAndGlonassL1AndL2UsedInSolution = strObj.NumGpsAndGlonassL1AndL2UsedInSolution;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.NovatelMsgHeader = feval([obj.NovatelGpsMsgsNovatelMessageHeaderClass '.loadobj'], strObj.NovatelMsgHeader);
            obj.ExtendedSolutionStatus = feval([obj.NovatelGpsMsgsNovatelExtendedSolutionStatusClass '.loadobj'], strObj.ExtendedSolutionStatus);
            obj.SignalMask = feval([obj.NovatelGpsMsgsNovatelSignalMaskClass '.loadobj'], strObj.SignalMask);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SolutionStatus = obj.SolutionStatus;
            strObj.PositionType = obj.PositionType;
            strObj.Lat = obj.Lat;
            strObj.Lon = obj.Lon;
            strObj.Height = obj.Height;
            strObj.Undulation = obj.Undulation;
            strObj.DatumId = obj.DatumId;
            strObj.LatSigma = obj.LatSigma;
            strObj.LonSigma = obj.LonSigma;
            strObj.HeightSigma = obj.HeightSigma;
            strObj.BaseStationId = obj.BaseStationId;
            strObj.DiffAge = obj.DiffAge;
            strObj.SolutionAge = obj.SolutionAge;
            strObj.NumSatellitesTracked = obj.NumSatellitesTracked;
            strObj.NumSatellitesUsedInSolution = obj.NumSatellitesUsedInSolution;
            strObj.NumGpsAndGlonassL1UsedInSolution = obj.NumGpsAndGlonassL1UsedInSolution;
            strObj.NumGpsAndGlonassL1AndL2UsedInSolution = obj.NumGpsAndGlonassL1AndL2UsedInSolution;
            strObj.Header = saveobj(obj.Header);
            strObj.NovatelMsgHeader = saveobj(obj.NovatelMsgHeader);
            strObj.ExtendedSolutionStatus = saveobj(obj.ExtendedSolutionStatus);
            strObj.SignalMask = saveobj(obj.SignalMask);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.NovatelPosition.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.NovatelPosition;
            obj.reload(strObj);
        end
    end
end
