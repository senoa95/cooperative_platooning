classdef Trackstat < ros.Message
    %Trackstat MATLAB implementation of novatel_gps_msgs/Trackstat
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/Trackstat' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '10e52c1ea54daca4de3c8cdda3a79817' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        NovatelGpsMsgsTrackstatChannelClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/TrackstatChannel') % Dispatch to MATLAB class for message type novatel_gps_msgs/TrackstatChannel
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        SolutionStatus
        PositionType
        Cutoff
        Channels
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Channels', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Channels', 'Cutoff', 'Header', 'PositionType', 'SolutionStatus'} % List of non-constant message properties
        ROSPropertyList = {'channels', 'cutoff', 'header', 'position_type', 'solution_status'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Trackstat(msg)
            %Trackstat Construct the message object Trackstat
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Trackstat', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function solutionstatus = get.SolutionStatus(obj)
            %get.SolutionStatus Get the value for property SolutionStatus
            solutionstatus = char(obj.JavaMessage.getSolutionStatus);
        end
        
        function set.SolutionStatus(obj, solutionstatus)
            %set.SolutionStatus Set the value for property SolutionStatus
            solutionstatus = convertStringsToChars(solutionstatus);
            
            validateattributes(solutionstatus, {'char', 'string'}, {}, 'Trackstat', 'SolutionStatus');
            
            obj.JavaMessage.setSolutionStatus(solutionstatus);
        end
        
        function positiontype = get.PositionType(obj)
            %get.PositionType Get the value for property PositionType
            positiontype = char(obj.JavaMessage.getPositionType);
        end
        
        function set.PositionType(obj, positiontype)
            %set.PositionType Set the value for property PositionType
            positiontype = convertStringsToChars(positiontype);
            
            validateattributes(positiontype, {'char', 'string'}, {}, 'Trackstat', 'PositionType');
            
            obj.JavaMessage.setPositionType(positiontype);
        end
        
        function cutoff = get.Cutoff(obj)
            %get.Cutoff Get the value for property Cutoff
            cutoff = single(obj.JavaMessage.getCutoff);
        end
        
        function set.Cutoff(obj, cutoff)
            %set.Cutoff Set the value for property Cutoff
            validateattributes(cutoff, {'numeric'}, {'nonempty', 'scalar'}, 'Trackstat', 'Cutoff');
            
            obj.JavaMessage.setCutoff(cutoff);
        end
        
        function channels = get.Channels(obj)
            %get.Channels Get the value for property Channels
            if isempty(obj.Cache.Channels)
                javaArray = obj.JavaMessage.getChannels;
                array = obj.readJavaArray(javaArray, obj.NovatelGpsMsgsTrackstatChannelClass);
                obj.Cache.Channels = feval(obj.NovatelGpsMsgsTrackstatChannelClass, array);
            end
            channels = obj.Cache.Channels;
        end
        
        function set.Channels(obj, channels)
            %set.Channels Set the value for property Channels
            if ~isvector(channels) && isempty(channels)
                % Allow empty [] input
                channels = feval([obj.NovatelGpsMsgsTrackstatChannelClass '.empty'], 0, 1);
            end
            
            validateattributes(channels, {obj.NovatelGpsMsgsTrackstatChannelClass}, {'vector'}, 'Trackstat', 'Channels');
            
            javaArray = obj.JavaMessage.getChannels;
            array = obj.writeJavaArray(channels, javaArray, obj.NovatelGpsMsgsTrackstatChannelClass);
            obj.JavaMessage.setChannels(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Channels)
                obj.Cache.Channels = [];
                obj.Cache.Channels = obj.Channels;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Channels = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SolutionStatus = obj.SolutionStatus;
            cpObj.PositionType = obj.PositionType;
            cpObj.Cutoff = obj.Cutoff;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Channels = copy(obj.Channels);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SolutionStatus = strObj.SolutionStatus;
            obj.PositionType = strObj.PositionType;
            obj.Cutoff = strObj.Cutoff;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            ChannelsCell = arrayfun(@(x) feval([obj.NovatelGpsMsgsTrackstatChannelClass '.loadobj'], x), strObj.Channels, 'UniformOutput', false);
            obj.Channels = vertcat(ChannelsCell{:});
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SolutionStatus = obj.SolutionStatus;
            strObj.PositionType = obj.PositionType;
            strObj.Cutoff = obj.Cutoff;
            strObj.Header = saveobj(obj.Header);
            strObj.Channels = arrayfun(@(x) saveobj(x), obj.Channels);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.Trackstat.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.Trackstat;
            obj.reload(strObj);
        end
    end
end
