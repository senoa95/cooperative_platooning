classdef Time < ros.Message
    %Time MATLAB implementation of novatel_gps_msgs/Time
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/Time' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '65d339585d71de8242304ff93e8a4f1a' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        ClockStatus
        Offset
        OffsetStd
        UtcOffset
        UtcYear
        UtcMonth
        UtcDay
        UtcHour
        UtcMinute
        UtcMillisecond
        UtcStatus
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ClockStatus', 'Header', 'Offset', 'OffsetStd', 'UtcDay', 'UtcHour', 'UtcMillisecond', 'UtcMinute', 'UtcMonth', 'UtcOffset', 'UtcStatus', 'UtcYear'} % List of non-constant message properties
        ROSPropertyList = {'clock_status', 'header', 'offset', 'offset_std', 'utc_day', 'utc_hour', 'utc_millisecond', 'utc_minute', 'utc_month', 'utc_offset', 'utc_status', 'utc_year'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Time(msg)
            %Time Construct the message object Time
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Time', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function clockstatus = get.ClockStatus(obj)
            %get.ClockStatus Get the value for property ClockStatus
            clockstatus = char(obj.JavaMessage.getClockStatus);
        end
        
        function set.ClockStatus(obj, clockstatus)
            %set.ClockStatus Set the value for property ClockStatus
            clockstatus = convertStringsToChars(clockstatus);
            
            validateattributes(clockstatus, {'char', 'string'}, {}, 'Time', 'ClockStatus');
            
            obj.JavaMessage.setClockStatus(clockstatus);
        end
        
        function offset = get.Offset(obj)
            %get.Offset Get the value for property Offset
            offset = double(obj.JavaMessage.getOffset);
        end
        
        function set.Offset(obj, offset)
            %set.Offset Set the value for property Offset
            validateattributes(offset, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'Offset');
            
            obj.JavaMessage.setOffset(offset);
        end
        
        function offsetstd = get.OffsetStd(obj)
            %get.OffsetStd Get the value for property OffsetStd
            offsetstd = double(obj.JavaMessage.getOffsetStd);
        end
        
        function set.OffsetStd(obj, offsetstd)
            %set.OffsetStd Set the value for property OffsetStd
            validateattributes(offsetstd, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'OffsetStd');
            
            obj.JavaMessage.setOffsetStd(offsetstd);
        end
        
        function utcoffset = get.UtcOffset(obj)
            %get.UtcOffset Get the value for property UtcOffset
            utcoffset = double(obj.JavaMessage.getUtcOffset);
        end
        
        function set.UtcOffset(obj, utcoffset)
            %set.UtcOffset Set the value for property UtcOffset
            validateattributes(utcoffset, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'UtcOffset');
            
            obj.JavaMessage.setUtcOffset(utcoffset);
        end
        
        function utcyear = get.UtcYear(obj)
            %get.UtcYear Get the value for property UtcYear
            utcyear = typecast(int32(obj.JavaMessage.getUtcYear), 'uint32');
        end
        
        function set.UtcYear(obj, utcyear)
            %set.UtcYear Set the value for property UtcYear
            validateattributes(utcyear, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'UtcYear');
            
            obj.JavaMessage.setUtcYear(utcyear);
        end
        
        function utcmonth = get.UtcMonth(obj)
            %get.UtcMonth Get the value for property UtcMonth
            utcmonth = typecast(int8(obj.JavaMessage.getUtcMonth), 'uint8');
        end
        
        function set.UtcMonth(obj, utcmonth)
            %set.UtcMonth Set the value for property UtcMonth
            validateattributes(utcmonth, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'UtcMonth');
            
            obj.JavaMessage.setUtcMonth(utcmonth);
        end
        
        function utcday = get.UtcDay(obj)
            %get.UtcDay Get the value for property UtcDay
            utcday = typecast(int8(obj.JavaMessage.getUtcDay), 'uint8');
        end
        
        function set.UtcDay(obj, utcday)
            %set.UtcDay Set the value for property UtcDay
            validateattributes(utcday, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'UtcDay');
            
            obj.JavaMessage.setUtcDay(utcday);
        end
        
        function utchour = get.UtcHour(obj)
            %get.UtcHour Get the value for property UtcHour
            utchour = typecast(int8(obj.JavaMessage.getUtcHour), 'uint8');
        end
        
        function set.UtcHour(obj, utchour)
            %set.UtcHour Set the value for property UtcHour
            validateattributes(utchour, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'UtcHour');
            
            obj.JavaMessage.setUtcHour(utchour);
        end
        
        function utcminute = get.UtcMinute(obj)
            %get.UtcMinute Get the value for property UtcMinute
            utcminute = typecast(int8(obj.JavaMessage.getUtcMinute), 'uint8');
        end
        
        function set.UtcMinute(obj, utcminute)
            %set.UtcMinute Set the value for property UtcMinute
            validateattributes(utcminute, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'UtcMinute');
            
            obj.JavaMessage.setUtcMinute(utcminute);
        end
        
        function utcmillisecond = get.UtcMillisecond(obj)
            %get.UtcMillisecond Get the value for property UtcMillisecond
            utcmillisecond = typecast(int32(obj.JavaMessage.getUtcMillisecond), 'uint32');
        end
        
        function set.UtcMillisecond(obj, utcmillisecond)
            %set.UtcMillisecond Set the value for property UtcMillisecond
            validateattributes(utcmillisecond, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'UtcMillisecond');
            
            obj.JavaMessage.setUtcMillisecond(utcmillisecond);
        end
        
        function utcstatus = get.UtcStatus(obj)
            %get.UtcStatus Get the value for property UtcStatus
            utcstatus = char(obj.JavaMessage.getUtcStatus);
        end
        
        function set.UtcStatus(obj, utcstatus)
            %set.UtcStatus Set the value for property UtcStatus
            utcstatus = convertStringsToChars(utcstatus);
            
            validateattributes(utcstatus, {'char', 'string'}, {}, 'Time', 'UtcStatus');
            
            obj.JavaMessage.setUtcStatus(utcstatus);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ClockStatus = obj.ClockStatus;
            cpObj.Offset = obj.Offset;
            cpObj.OffsetStd = obj.OffsetStd;
            cpObj.UtcOffset = obj.UtcOffset;
            cpObj.UtcYear = obj.UtcYear;
            cpObj.UtcMonth = obj.UtcMonth;
            cpObj.UtcDay = obj.UtcDay;
            cpObj.UtcHour = obj.UtcHour;
            cpObj.UtcMinute = obj.UtcMinute;
            cpObj.UtcMillisecond = obj.UtcMillisecond;
            cpObj.UtcStatus = obj.UtcStatus;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ClockStatus = strObj.ClockStatus;
            obj.Offset = strObj.Offset;
            obj.OffsetStd = strObj.OffsetStd;
            obj.UtcOffset = strObj.UtcOffset;
            obj.UtcYear = strObj.UtcYear;
            obj.UtcMonth = strObj.UtcMonth;
            obj.UtcDay = strObj.UtcDay;
            obj.UtcHour = strObj.UtcHour;
            obj.UtcMinute = strObj.UtcMinute;
            obj.UtcMillisecond = strObj.UtcMillisecond;
            obj.UtcStatus = strObj.UtcStatus;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ClockStatus = obj.ClockStatus;
            strObj.Offset = obj.Offset;
            strObj.OffsetStd = obj.OffsetStd;
            strObj.UtcOffset = obj.UtcOffset;
            strObj.UtcYear = obj.UtcYear;
            strObj.UtcMonth = obj.UtcMonth;
            strObj.UtcDay = obj.UtcDay;
            strObj.UtcHour = obj.UtcHour;
            strObj.UtcMinute = obj.UtcMinute;
            strObj.UtcMillisecond = obj.UtcMillisecond;
            strObj.UtcStatus = obj.UtcStatus;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.Time.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.Time;
            obj.reload(strObj);
        end
    end
end
