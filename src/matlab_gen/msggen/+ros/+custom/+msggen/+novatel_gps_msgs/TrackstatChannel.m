classdef TrackstatChannel < ros.Message
    %TrackstatChannel MATLAB implementation of novatel_gps_msgs/TrackstatChannel
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/TrackstatChannel' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '295831118c5ddfb83ac5b655586ae7ef' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Prn
        Glofreq
        ChTrStatus
        Psr
        Doppler
        CNo
        Locktime
        PsrRes
        Reject
        PsrWeight
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CNo', 'ChTrStatus', 'Doppler', 'Glofreq', 'Locktime', 'Prn', 'Psr', 'PsrRes', 'PsrWeight', 'Reject'} % List of non-constant message properties
        ROSPropertyList = {'c_no', 'ch_tr_status', 'doppler', 'glofreq', 'locktime', 'prn', 'psr', 'psr_res', 'psr_weight', 'reject'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = TrackstatChannel(msg)
            %TrackstatChannel Construct the message object TrackstatChannel
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function prn = get.Prn(obj)
            %get.Prn Get the value for property Prn
            prn = int16(obj.JavaMessage.getPrn);
        end
        
        function set.Prn(obj, prn)
            %set.Prn Set the value for property Prn
            validateattributes(prn, {'numeric'}, {'nonempty', 'scalar'}, 'TrackstatChannel', 'Prn');
            
            obj.JavaMessage.setPrn(prn);
        end
        
        function glofreq = get.Glofreq(obj)
            %get.Glofreq Get the value for property Glofreq
            glofreq = int16(obj.JavaMessage.getGlofreq);
        end
        
        function set.Glofreq(obj, glofreq)
            %set.Glofreq Set the value for property Glofreq
            validateattributes(glofreq, {'numeric'}, {'nonempty', 'scalar'}, 'TrackstatChannel', 'Glofreq');
            
            obj.JavaMessage.setGlofreq(glofreq);
        end
        
        function chtrstatus = get.ChTrStatus(obj)
            %get.ChTrStatus Get the value for property ChTrStatus
            chtrstatus = typecast(int32(obj.JavaMessage.getChTrStatus), 'uint32');
        end
        
        function set.ChTrStatus(obj, chtrstatus)
            %set.ChTrStatus Set the value for property ChTrStatus
            validateattributes(chtrstatus, {'numeric'}, {'nonempty', 'scalar'}, 'TrackstatChannel', 'ChTrStatus');
            
            obj.JavaMessage.setChTrStatus(chtrstatus);
        end
        
        function psr = get.Psr(obj)
            %get.Psr Get the value for property Psr
            psr = double(obj.JavaMessage.getPsr);
        end
        
        function set.Psr(obj, psr)
            %set.Psr Set the value for property Psr
            validateattributes(psr, {'numeric'}, {'nonempty', 'scalar'}, 'TrackstatChannel', 'Psr');
            
            obj.JavaMessage.setPsr(psr);
        end
        
        function doppler = get.Doppler(obj)
            %get.Doppler Get the value for property Doppler
            doppler = single(obj.JavaMessage.getDoppler);
        end
        
        function set.Doppler(obj, doppler)
            %set.Doppler Set the value for property Doppler
            validateattributes(doppler, {'numeric'}, {'nonempty', 'scalar'}, 'TrackstatChannel', 'Doppler');
            
            obj.JavaMessage.setDoppler(doppler);
        end
        
        function cno = get.CNo(obj)
            %get.CNo Get the value for property CNo
            cno = single(obj.JavaMessage.getCNo);
        end
        
        function set.CNo(obj, cno)
            %set.CNo Set the value for property CNo
            validateattributes(cno, {'numeric'}, {'nonempty', 'scalar'}, 'TrackstatChannel', 'CNo');
            
            obj.JavaMessage.setCNo(cno);
        end
        
        function locktime = get.Locktime(obj)
            %get.Locktime Get the value for property Locktime
            locktime = single(obj.JavaMessage.getLocktime);
        end
        
        function set.Locktime(obj, locktime)
            %set.Locktime Set the value for property Locktime
            validateattributes(locktime, {'numeric'}, {'nonempty', 'scalar'}, 'TrackstatChannel', 'Locktime');
            
            obj.JavaMessage.setLocktime(locktime);
        end
        
        function psrres = get.PsrRes(obj)
            %get.PsrRes Get the value for property PsrRes
            psrres = single(obj.JavaMessage.getPsrRes);
        end
        
        function set.PsrRes(obj, psrres)
            %set.PsrRes Set the value for property PsrRes
            validateattributes(psrres, {'numeric'}, {'nonempty', 'scalar'}, 'TrackstatChannel', 'PsrRes');
            
            obj.JavaMessage.setPsrRes(psrres);
        end
        
        function reject = get.Reject(obj)
            %get.Reject Get the value for property Reject
            reject = char(obj.JavaMessage.getReject);
        end
        
        function set.Reject(obj, reject)
            %set.Reject Set the value for property Reject
            reject = convertStringsToChars(reject);
            
            validateattributes(reject, {'char', 'string'}, {}, 'TrackstatChannel', 'Reject');
            
            obj.JavaMessage.setReject(reject);
        end
        
        function psrweight = get.PsrWeight(obj)
            %get.PsrWeight Get the value for property PsrWeight
            psrweight = single(obj.JavaMessage.getPsrWeight);
        end
        
        function set.PsrWeight(obj, psrweight)
            %set.PsrWeight Set the value for property PsrWeight
            validateattributes(psrweight, {'numeric'}, {'nonempty', 'scalar'}, 'TrackstatChannel', 'PsrWeight');
            
            obj.JavaMessage.setPsrWeight(psrweight);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Prn = obj.Prn;
            cpObj.Glofreq = obj.Glofreq;
            cpObj.ChTrStatus = obj.ChTrStatus;
            cpObj.Psr = obj.Psr;
            cpObj.Doppler = obj.Doppler;
            cpObj.CNo = obj.CNo;
            cpObj.Locktime = obj.Locktime;
            cpObj.PsrRes = obj.PsrRes;
            cpObj.Reject = obj.Reject;
            cpObj.PsrWeight = obj.PsrWeight;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Prn = strObj.Prn;
            obj.Glofreq = strObj.Glofreq;
            obj.ChTrStatus = strObj.ChTrStatus;
            obj.Psr = strObj.Psr;
            obj.Doppler = strObj.Doppler;
            obj.CNo = strObj.CNo;
            obj.Locktime = strObj.Locktime;
            obj.PsrRes = strObj.PsrRes;
            obj.Reject = strObj.Reject;
            obj.PsrWeight = strObj.PsrWeight;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Prn = obj.Prn;
            strObj.Glofreq = obj.Glofreq;
            strObj.ChTrStatus = obj.ChTrStatus;
            strObj.Psr = obj.Psr;
            strObj.Doppler = obj.Doppler;
            strObj.CNo = obj.CNo;
            strObj.Locktime = obj.Locktime;
            strObj.PsrRes = obj.PsrRes;
            strObj.Reject = obj.Reject;
            strObj.PsrWeight = obj.PsrWeight;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.TrackstatChannel.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.TrackstatChannel;
            obj.reload(strObj);
        end
    end
end
