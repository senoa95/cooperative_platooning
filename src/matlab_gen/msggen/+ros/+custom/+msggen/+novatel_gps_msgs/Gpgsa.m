classdef Gpgsa < ros.Message
    %Gpgsa MATLAB implementation of novatel_gps_msgs/Gpgsa
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/Gpgsa' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '94a6ef4a36d322374b16097a5d03433e' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        MessageId
        AutoManualMode
        FixMode
        Pdop
        Hdop
        Vdop
        SvIds
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AutoManualMode', 'FixMode', 'Hdop', 'Header', 'MessageId', 'Pdop', 'SvIds', 'Vdop'} % List of non-constant message properties
        ROSPropertyList = {'auto_manual_mode', 'fix_mode', 'hdop', 'header', 'message_id', 'pdop', 'sv_ids', 'vdop'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Gpgsa(msg)
            %Gpgsa Construct the message object Gpgsa
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Gpgsa', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function messageid = get.MessageId(obj)
            %get.MessageId Get the value for property MessageId
            messageid = char(obj.JavaMessage.getMessageId);
        end
        
        function set.MessageId(obj, messageid)
            %set.MessageId Set the value for property MessageId
            messageid = convertStringsToChars(messageid);
            
            validateattributes(messageid, {'char', 'string'}, {}, 'Gpgsa', 'MessageId');
            
            obj.JavaMessage.setMessageId(messageid);
        end
        
        function automanualmode = get.AutoManualMode(obj)
            %get.AutoManualMode Get the value for property AutoManualMode
            automanualmode = char(obj.JavaMessage.getAutoManualMode);
        end
        
        function set.AutoManualMode(obj, automanualmode)
            %set.AutoManualMode Set the value for property AutoManualMode
            automanualmode = convertStringsToChars(automanualmode);
            
            validateattributes(automanualmode, {'char', 'string'}, {}, 'Gpgsa', 'AutoManualMode');
            
            obj.JavaMessage.setAutoManualMode(automanualmode);
        end
        
        function fixmode = get.FixMode(obj)
            %get.FixMode Get the value for property FixMode
            fixmode = typecast(int8(obj.JavaMessage.getFixMode), 'uint8');
        end
        
        function set.FixMode(obj, fixmode)
            %set.FixMode Set the value for property FixMode
            validateattributes(fixmode, {'numeric'}, {'nonempty', 'scalar'}, 'Gpgsa', 'FixMode');
            
            obj.JavaMessage.setFixMode(fixmode);
        end
        
        function pdop = get.Pdop(obj)
            %get.Pdop Get the value for property Pdop
            pdop = single(obj.JavaMessage.getPdop);
        end
        
        function set.Pdop(obj, pdop)
            %set.Pdop Set the value for property Pdop
            validateattributes(pdop, {'numeric'}, {'nonempty', 'scalar'}, 'Gpgsa', 'Pdop');
            
            obj.JavaMessage.setPdop(pdop);
        end
        
        function hdop = get.Hdop(obj)
            %get.Hdop Get the value for property Hdop
            hdop = single(obj.JavaMessage.getHdop);
        end
        
        function set.Hdop(obj, hdop)
            %set.Hdop Set the value for property Hdop
            validateattributes(hdop, {'numeric'}, {'nonempty', 'scalar'}, 'Gpgsa', 'Hdop');
            
            obj.JavaMessage.setHdop(hdop);
        end
        
        function vdop = get.Vdop(obj)
            %get.Vdop Get the value for property Vdop
            vdop = single(obj.JavaMessage.getVdop);
        end
        
        function set.Vdop(obj, vdop)
            %set.Vdop Set the value for property Vdop
            validateattributes(vdop, {'numeric'}, {'nonempty', 'scalar'}, 'Gpgsa', 'Vdop');
            
            obj.JavaMessage.setVdop(vdop);
        end
        
        function svids = get.SvIds(obj)
            %get.SvIds Get the value for property SvIds
            javaArray = obj.JavaMessage.getSvIds;
            array = obj.readJavaArray(javaArray, 'uint8');
            svids = uint8(array);
        end
        
        function set.SvIds(obj, svids)
            %set.SvIds Set the value for property SvIds
            if ~isvector(svids) && isempty(svids)
                % Allow empty [] input
                svids = uint8.empty(0,1);
            end
            
            validateattributes(svids, {'numeric'}, {'vector'}, 'Gpgsa', 'SvIds');
            
            javaArray = obj.JavaMessage.getSvIds;
            array = obj.writeJavaArray(svids, javaArray, 'uint8');
            obj.JavaMessage.setSvIds(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.MessageId = obj.MessageId;
            cpObj.AutoManualMode = obj.AutoManualMode;
            cpObj.FixMode = obj.FixMode;
            cpObj.Pdop = obj.Pdop;
            cpObj.Hdop = obj.Hdop;
            cpObj.Vdop = obj.Vdop;
            cpObj.SvIds = obj.SvIds;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.MessageId = strObj.MessageId;
            obj.AutoManualMode = strObj.AutoManualMode;
            obj.FixMode = strObj.FixMode;
            obj.Pdop = strObj.Pdop;
            obj.Hdop = strObj.Hdop;
            obj.Vdop = strObj.Vdop;
            obj.SvIds = strObj.SvIds;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.MessageId = obj.MessageId;
            strObj.AutoManualMode = obj.AutoManualMode;
            strObj.FixMode = obj.FixMode;
            strObj.Pdop = obj.Pdop;
            strObj.Hdop = obj.Hdop;
            strObj.Vdop = obj.Vdop;
            strObj.SvIds = obj.SvIds;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.Gpgsa.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.Gpgsa;
            obj.reload(strObj);
        end
    end
end
