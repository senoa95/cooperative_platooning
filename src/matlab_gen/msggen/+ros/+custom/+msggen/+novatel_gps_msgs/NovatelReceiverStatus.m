classdef NovatelReceiverStatus < ros.Message
    %NovatelReceiverStatus MATLAB implementation of novatel_gps_msgs/NovatelReceiverStatus
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/NovatelReceiverStatus' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'cf2774401808a6dde392e2ebdb09ca15' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        OriginalStatusCode
        ErrorFlag
        TemperatureFlag
        VoltageSupplyFlag
        AntennaPowered
        AntennaIsOpen
        AntennaIsShorted
        CpuOverloadFlag
        Com1BufferOverrun
        Com2BufferOverrun
        Com3BufferOverrun
        UsbBufferOverrun
        Rf1AgcFlag
        Rf2AgcFlag
        AlmanacFlag
        PositionSolutionFlag
        PositionFixedFlag
        ClockSteeringStatusEnabled
        ClockModelFlag
        OemvExternalOscillatorFlag
        SoftwareResourceFlag
        Aux1StatusEventFlag
        Aux2StatusEventFlag
        Aux3StatusEventFlag
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AlmanacFlag', 'AntennaIsOpen', 'AntennaIsShorted', 'AntennaPowered', 'Aux1StatusEventFlag', 'Aux2StatusEventFlag', 'Aux3StatusEventFlag', 'ClockModelFlag', 'ClockSteeringStatusEnabled', 'Com1BufferOverrun', 'Com2BufferOverrun', 'Com3BufferOverrun', 'CpuOverloadFlag', 'ErrorFlag', 'OemvExternalOscillatorFlag', 'OriginalStatusCode', 'PositionFixedFlag', 'PositionSolutionFlag', 'Rf1AgcFlag', 'Rf2AgcFlag', 'SoftwareResourceFlag', 'TemperatureFlag', 'UsbBufferOverrun', 'VoltageSupplyFlag'} % List of non-constant message properties
        ROSPropertyList = {'almanac_flag', 'antenna_is_open', 'antenna_is_shorted', 'antenna_powered', 'aux1_status_event_flag', 'aux2_status_event_flag', 'aux3_status_event_flag', 'clock_model_flag', 'clock_steering_status_enabled', 'com1_buffer_overrun', 'com2_buffer_overrun', 'com3_buffer_overrun', 'cpu_overload_flag', 'error_flag', 'oemv_external_oscillator_flag', 'original_status_code', 'position_fixed_flag', 'position_solution_flag', 'rf1_agc_flag', 'rf2_agc_flag', 'software_resource_flag', 'temperature_flag', 'usb_buffer_overrun', 'voltage_supply_flag'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = NovatelReceiverStatus(msg)
            %NovatelReceiverStatus Construct the message object NovatelReceiverStatus
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function originalstatuscode = get.OriginalStatusCode(obj)
            %get.OriginalStatusCode Get the value for property OriginalStatusCode
            originalstatuscode = typecast(int32(obj.JavaMessage.getOriginalStatusCode), 'uint32');
        end
        
        function set.OriginalStatusCode(obj, originalstatuscode)
            %set.OriginalStatusCode Set the value for property OriginalStatusCode
            validateattributes(originalstatuscode, {'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'OriginalStatusCode');
            
            obj.JavaMessage.setOriginalStatusCode(originalstatuscode);
        end
        
        function errorflag = get.ErrorFlag(obj)
            %get.ErrorFlag Get the value for property ErrorFlag
            errorflag = logical(obj.JavaMessage.getErrorFlag);
        end
        
        function set.ErrorFlag(obj, errorflag)
            %set.ErrorFlag Set the value for property ErrorFlag
            validateattributes(errorflag, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'ErrorFlag');
            
            obj.JavaMessage.setErrorFlag(errorflag);
        end
        
        function temperatureflag = get.TemperatureFlag(obj)
            %get.TemperatureFlag Get the value for property TemperatureFlag
            temperatureflag = logical(obj.JavaMessage.getTemperatureFlag);
        end
        
        function set.TemperatureFlag(obj, temperatureflag)
            %set.TemperatureFlag Set the value for property TemperatureFlag
            validateattributes(temperatureflag, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'TemperatureFlag');
            
            obj.JavaMessage.setTemperatureFlag(temperatureflag);
        end
        
        function voltagesupplyflag = get.VoltageSupplyFlag(obj)
            %get.VoltageSupplyFlag Get the value for property VoltageSupplyFlag
            voltagesupplyflag = logical(obj.JavaMessage.getVoltageSupplyFlag);
        end
        
        function set.VoltageSupplyFlag(obj, voltagesupplyflag)
            %set.VoltageSupplyFlag Set the value for property VoltageSupplyFlag
            validateattributes(voltagesupplyflag, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'VoltageSupplyFlag');
            
            obj.JavaMessage.setVoltageSupplyFlag(voltagesupplyflag);
        end
        
        function antennapowered = get.AntennaPowered(obj)
            %get.AntennaPowered Get the value for property AntennaPowered
            antennapowered = logical(obj.JavaMessage.getAntennaPowered);
        end
        
        function set.AntennaPowered(obj, antennapowered)
            %set.AntennaPowered Set the value for property AntennaPowered
            validateattributes(antennapowered, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'AntennaPowered');
            
            obj.JavaMessage.setAntennaPowered(antennapowered);
        end
        
        function antennaisopen = get.AntennaIsOpen(obj)
            %get.AntennaIsOpen Get the value for property AntennaIsOpen
            antennaisopen = logical(obj.JavaMessage.getAntennaIsOpen);
        end
        
        function set.AntennaIsOpen(obj, antennaisopen)
            %set.AntennaIsOpen Set the value for property AntennaIsOpen
            validateattributes(antennaisopen, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'AntennaIsOpen');
            
            obj.JavaMessage.setAntennaIsOpen(antennaisopen);
        end
        
        function antennaisshorted = get.AntennaIsShorted(obj)
            %get.AntennaIsShorted Get the value for property AntennaIsShorted
            antennaisshorted = logical(obj.JavaMessage.getAntennaIsShorted);
        end
        
        function set.AntennaIsShorted(obj, antennaisshorted)
            %set.AntennaIsShorted Set the value for property AntennaIsShorted
            validateattributes(antennaisshorted, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'AntennaIsShorted');
            
            obj.JavaMessage.setAntennaIsShorted(antennaisshorted);
        end
        
        function cpuoverloadflag = get.CpuOverloadFlag(obj)
            %get.CpuOverloadFlag Get the value for property CpuOverloadFlag
            cpuoverloadflag = logical(obj.JavaMessage.getCpuOverloadFlag);
        end
        
        function set.CpuOverloadFlag(obj, cpuoverloadflag)
            %set.CpuOverloadFlag Set the value for property CpuOverloadFlag
            validateattributes(cpuoverloadflag, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'CpuOverloadFlag');
            
            obj.JavaMessage.setCpuOverloadFlag(cpuoverloadflag);
        end
        
        function com1bufferoverrun = get.Com1BufferOverrun(obj)
            %get.Com1BufferOverrun Get the value for property Com1BufferOverrun
            com1bufferoverrun = logical(obj.JavaMessage.getCom1BufferOverrun);
        end
        
        function set.Com1BufferOverrun(obj, com1bufferoverrun)
            %set.Com1BufferOverrun Set the value for property Com1BufferOverrun
            validateattributes(com1bufferoverrun, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'Com1BufferOverrun');
            
            obj.JavaMessage.setCom1BufferOverrun(com1bufferoverrun);
        end
        
        function com2bufferoverrun = get.Com2BufferOverrun(obj)
            %get.Com2BufferOverrun Get the value for property Com2BufferOverrun
            com2bufferoverrun = logical(obj.JavaMessage.getCom2BufferOverrun);
        end
        
        function set.Com2BufferOverrun(obj, com2bufferoverrun)
            %set.Com2BufferOverrun Set the value for property Com2BufferOverrun
            validateattributes(com2bufferoverrun, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'Com2BufferOverrun');
            
            obj.JavaMessage.setCom2BufferOverrun(com2bufferoverrun);
        end
        
        function com3bufferoverrun = get.Com3BufferOverrun(obj)
            %get.Com3BufferOverrun Get the value for property Com3BufferOverrun
            com3bufferoverrun = logical(obj.JavaMessage.getCom3BufferOverrun);
        end
        
        function set.Com3BufferOverrun(obj, com3bufferoverrun)
            %set.Com3BufferOverrun Set the value for property Com3BufferOverrun
            validateattributes(com3bufferoverrun, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'Com3BufferOverrun');
            
            obj.JavaMessage.setCom3BufferOverrun(com3bufferoverrun);
        end
        
        function usbbufferoverrun = get.UsbBufferOverrun(obj)
            %get.UsbBufferOverrun Get the value for property UsbBufferOverrun
            usbbufferoverrun = logical(obj.JavaMessage.getUsbBufferOverrun);
        end
        
        function set.UsbBufferOverrun(obj, usbbufferoverrun)
            %set.UsbBufferOverrun Set the value for property UsbBufferOverrun
            validateattributes(usbbufferoverrun, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'UsbBufferOverrun');
            
            obj.JavaMessage.setUsbBufferOverrun(usbbufferoverrun);
        end
        
        function rf1agcflag = get.Rf1AgcFlag(obj)
            %get.Rf1AgcFlag Get the value for property Rf1AgcFlag
            rf1agcflag = logical(obj.JavaMessage.getRf1AgcFlag);
        end
        
        function set.Rf1AgcFlag(obj, rf1agcflag)
            %set.Rf1AgcFlag Set the value for property Rf1AgcFlag
            validateattributes(rf1agcflag, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'Rf1AgcFlag');
            
            obj.JavaMessage.setRf1AgcFlag(rf1agcflag);
        end
        
        function rf2agcflag = get.Rf2AgcFlag(obj)
            %get.Rf2AgcFlag Get the value for property Rf2AgcFlag
            rf2agcflag = logical(obj.JavaMessage.getRf2AgcFlag);
        end
        
        function set.Rf2AgcFlag(obj, rf2agcflag)
            %set.Rf2AgcFlag Set the value for property Rf2AgcFlag
            validateattributes(rf2agcflag, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'Rf2AgcFlag');
            
            obj.JavaMessage.setRf2AgcFlag(rf2agcflag);
        end
        
        function almanacflag = get.AlmanacFlag(obj)
            %get.AlmanacFlag Get the value for property AlmanacFlag
            almanacflag = logical(obj.JavaMessage.getAlmanacFlag);
        end
        
        function set.AlmanacFlag(obj, almanacflag)
            %set.AlmanacFlag Set the value for property AlmanacFlag
            validateattributes(almanacflag, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'AlmanacFlag');
            
            obj.JavaMessage.setAlmanacFlag(almanacflag);
        end
        
        function positionsolutionflag = get.PositionSolutionFlag(obj)
            %get.PositionSolutionFlag Get the value for property PositionSolutionFlag
            positionsolutionflag = logical(obj.JavaMessage.getPositionSolutionFlag);
        end
        
        function set.PositionSolutionFlag(obj, positionsolutionflag)
            %set.PositionSolutionFlag Set the value for property PositionSolutionFlag
            validateattributes(positionsolutionflag, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'PositionSolutionFlag');
            
            obj.JavaMessage.setPositionSolutionFlag(positionsolutionflag);
        end
        
        function positionfixedflag = get.PositionFixedFlag(obj)
            %get.PositionFixedFlag Get the value for property PositionFixedFlag
            positionfixedflag = logical(obj.JavaMessage.getPositionFixedFlag);
        end
        
        function set.PositionFixedFlag(obj, positionfixedflag)
            %set.PositionFixedFlag Set the value for property PositionFixedFlag
            validateattributes(positionfixedflag, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'PositionFixedFlag');
            
            obj.JavaMessage.setPositionFixedFlag(positionfixedflag);
        end
        
        function clocksteeringstatusenabled = get.ClockSteeringStatusEnabled(obj)
            %get.ClockSteeringStatusEnabled Get the value for property ClockSteeringStatusEnabled
            clocksteeringstatusenabled = logical(obj.JavaMessage.getClockSteeringStatusEnabled);
        end
        
        function set.ClockSteeringStatusEnabled(obj, clocksteeringstatusenabled)
            %set.ClockSteeringStatusEnabled Set the value for property ClockSteeringStatusEnabled
            validateattributes(clocksteeringstatusenabled, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'ClockSteeringStatusEnabled');
            
            obj.JavaMessage.setClockSteeringStatusEnabled(clocksteeringstatusenabled);
        end
        
        function clockmodelflag = get.ClockModelFlag(obj)
            %get.ClockModelFlag Get the value for property ClockModelFlag
            clockmodelflag = logical(obj.JavaMessage.getClockModelFlag);
        end
        
        function set.ClockModelFlag(obj, clockmodelflag)
            %set.ClockModelFlag Set the value for property ClockModelFlag
            validateattributes(clockmodelflag, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'ClockModelFlag');
            
            obj.JavaMessage.setClockModelFlag(clockmodelflag);
        end
        
        function oemvexternaloscillatorflag = get.OemvExternalOscillatorFlag(obj)
            %get.OemvExternalOscillatorFlag Get the value for property OemvExternalOscillatorFlag
            oemvexternaloscillatorflag = logical(obj.JavaMessage.getOemvExternalOscillatorFlag);
        end
        
        function set.OemvExternalOscillatorFlag(obj, oemvexternaloscillatorflag)
            %set.OemvExternalOscillatorFlag Set the value for property OemvExternalOscillatorFlag
            validateattributes(oemvexternaloscillatorflag, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'OemvExternalOscillatorFlag');
            
            obj.JavaMessage.setOemvExternalOscillatorFlag(oemvexternaloscillatorflag);
        end
        
        function softwareresourceflag = get.SoftwareResourceFlag(obj)
            %get.SoftwareResourceFlag Get the value for property SoftwareResourceFlag
            softwareresourceflag = logical(obj.JavaMessage.getSoftwareResourceFlag);
        end
        
        function set.SoftwareResourceFlag(obj, softwareresourceflag)
            %set.SoftwareResourceFlag Set the value for property SoftwareResourceFlag
            validateattributes(softwareresourceflag, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'SoftwareResourceFlag');
            
            obj.JavaMessage.setSoftwareResourceFlag(softwareresourceflag);
        end
        
        function aux1statuseventflag = get.Aux1StatusEventFlag(obj)
            %get.Aux1StatusEventFlag Get the value for property Aux1StatusEventFlag
            aux1statuseventflag = logical(obj.JavaMessage.getAux1StatusEventFlag);
        end
        
        function set.Aux1StatusEventFlag(obj, aux1statuseventflag)
            %set.Aux1StatusEventFlag Set the value for property Aux1StatusEventFlag
            validateattributes(aux1statuseventflag, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'Aux1StatusEventFlag');
            
            obj.JavaMessage.setAux1StatusEventFlag(aux1statuseventflag);
        end
        
        function aux2statuseventflag = get.Aux2StatusEventFlag(obj)
            %get.Aux2StatusEventFlag Get the value for property Aux2StatusEventFlag
            aux2statuseventflag = logical(obj.JavaMessage.getAux2StatusEventFlag);
        end
        
        function set.Aux2StatusEventFlag(obj, aux2statuseventflag)
            %set.Aux2StatusEventFlag Set the value for property Aux2StatusEventFlag
            validateattributes(aux2statuseventflag, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'Aux2StatusEventFlag');
            
            obj.JavaMessage.setAux2StatusEventFlag(aux2statuseventflag);
        end
        
        function aux3statuseventflag = get.Aux3StatusEventFlag(obj)
            %get.Aux3StatusEventFlag Get the value for property Aux3StatusEventFlag
            aux3statuseventflag = logical(obj.JavaMessage.getAux3StatusEventFlag);
        end
        
        function set.Aux3StatusEventFlag(obj, aux3statuseventflag)
            %set.Aux3StatusEventFlag Set the value for property Aux3StatusEventFlag
            validateattributes(aux3statuseventflag, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'NovatelReceiverStatus', 'Aux3StatusEventFlag');
            
            obj.JavaMessage.setAux3StatusEventFlag(aux3statuseventflag);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.OriginalStatusCode = obj.OriginalStatusCode;
            cpObj.ErrorFlag = obj.ErrorFlag;
            cpObj.TemperatureFlag = obj.TemperatureFlag;
            cpObj.VoltageSupplyFlag = obj.VoltageSupplyFlag;
            cpObj.AntennaPowered = obj.AntennaPowered;
            cpObj.AntennaIsOpen = obj.AntennaIsOpen;
            cpObj.AntennaIsShorted = obj.AntennaIsShorted;
            cpObj.CpuOverloadFlag = obj.CpuOverloadFlag;
            cpObj.Com1BufferOverrun = obj.Com1BufferOverrun;
            cpObj.Com2BufferOverrun = obj.Com2BufferOverrun;
            cpObj.Com3BufferOverrun = obj.Com3BufferOverrun;
            cpObj.UsbBufferOverrun = obj.UsbBufferOverrun;
            cpObj.Rf1AgcFlag = obj.Rf1AgcFlag;
            cpObj.Rf2AgcFlag = obj.Rf2AgcFlag;
            cpObj.AlmanacFlag = obj.AlmanacFlag;
            cpObj.PositionSolutionFlag = obj.PositionSolutionFlag;
            cpObj.PositionFixedFlag = obj.PositionFixedFlag;
            cpObj.ClockSteeringStatusEnabled = obj.ClockSteeringStatusEnabled;
            cpObj.ClockModelFlag = obj.ClockModelFlag;
            cpObj.OemvExternalOscillatorFlag = obj.OemvExternalOscillatorFlag;
            cpObj.SoftwareResourceFlag = obj.SoftwareResourceFlag;
            cpObj.Aux1StatusEventFlag = obj.Aux1StatusEventFlag;
            cpObj.Aux2StatusEventFlag = obj.Aux2StatusEventFlag;
            cpObj.Aux3StatusEventFlag = obj.Aux3StatusEventFlag;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.OriginalStatusCode = strObj.OriginalStatusCode;
            obj.ErrorFlag = strObj.ErrorFlag;
            obj.TemperatureFlag = strObj.TemperatureFlag;
            obj.VoltageSupplyFlag = strObj.VoltageSupplyFlag;
            obj.AntennaPowered = strObj.AntennaPowered;
            obj.AntennaIsOpen = strObj.AntennaIsOpen;
            obj.AntennaIsShorted = strObj.AntennaIsShorted;
            obj.CpuOverloadFlag = strObj.CpuOverloadFlag;
            obj.Com1BufferOverrun = strObj.Com1BufferOverrun;
            obj.Com2BufferOverrun = strObj.Com2BufferOverrun;
            obj.Com3BufferOverrun = strObj.Com3BufferOverrun;
            obj.UsbBufferOverrun = strObj.UsbBufferOverrun;
            obj.Rf1AgcFlag = strObj.Rf1AgcFlag;
            obj.Rf2AgcFlag = strObj.Rf2AgcFlag;
            obj.AlmanacFlag = strObj.AlmanacFlag;
            obj.PositionSolutionFlag = strObj.PositionSolutionFlag;
            obj.PositionFixedFlag = strObj.PositionFixedFlag;
            obj.ClockSteeringStatusEnabled = strObj.ClockSteeringStatusEnabled;
            obj.ClockModelFlag = strObj.ClockModelFlag;
            obj.OemvExternalOscillatorFlag = strObj.OemvExternalOscillatorFlag;
            obj.SoftwareResourceFlag = strObj.SoftwareResourceFlag;
            obj.Aux1StatusEventFlag = strObj.Aux1StatusEventFlag;
            obj.Aux2StatusEventFlag = strObj.Aux2StatusEventFlag;
            obj.Aux3StatusEventFlag = strObj.Aux3StatusEventFlag;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.OriginalStatusCode = obj.OriginalStatusCode;
            strObj.ErrorFlag = obj.ErrorFlag;
            strObj.TemperatureFlag = obj.TemperatureFlag;
            strObj.VoltageSupplyFlag = obj.VoltageSupplyFlag;
            strObj.AntennaPowered = obj.AntennaPowered;
            strObj.AntennaIsOpen = obj.AntennaIsOpen;
            strObj.AntennaIsShorted = obj.AntennaIsShorted;
            strObj.CpuOverloadFlag = obj.CpuOverloadFlag;
            strObj.Com1BufferOverrun = obj.Com1BufferOverrun;
            strObj.Com2BufferOverrun = obj.Com2BufferOverrun;
            strObj.Com3BufferOverrun = obj.Com3BufferOverrun;
            strObj.UsbBufferOverrun = obj.UsbBufferOverrun;
            strObj.Rf1AgcFlag = obj.Rf1AgcFlag;
            strObj.Rf2AgcFlag = obj.Rf2AgcFlag;
            strObj.AlmanacFlag = obj.AlmanacFlag;
            strObj.PositionSolutionFlag = obj.PositionSolutionFlag;
            strObj.PositionFixedFlag = obj.PositionFixedFlag;
            strObj.ClockSteeringStatusEnabled = obj.ClockSteeringStatusEnabled;
            strObj.ClockModelFlag = obj.ClockModelFlag;
            strObj.OemvExternalOscillatorFlag = obj.OemvExternalOscillatorFlag;
            strObj.SoftwareResourceFlag = obj.SoftwareResourceFlag;
            strObj.Aux1StatusEventFlag = obj.Aux1StatusEventFlag;
            strObj.Aux2StatusEventFlag = obj.Aux2StatusEventFlag;
            strObj.Aux3StatusEventFlag = obj.Aux3StatusEventFlag;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.NovatelReceiverStatus.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.NovatelReceiverStatus;
            obj.reload(strObj);
        end
    end
end
