classdef Gprmc < ros.Message
    %Gprmc MATLAB implementation of novatel_gps_msgs/Gprmc
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/Gprmc' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '02533bac67f17457b2e3538525ba1aae' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        MessageId
        UtcSeconds
        PositionStatus
        Lat
        Lon
        LatDir
        LonDir
        Speed
        Track
        Date
        MagVar
        MagVarDirection
        ModeIndicator
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Date', 'Header', 'Lat', 'LatDir', 'Lon', 'LonDir', 'MagVar', 'MagVarDirection', 'MessageId', 'ModeIndicator', 'PositionStatus', 'Speed', 'Track', 'UtcSeconds'} % List of non-constant message properties
        ROSPropertyList = {'date', 'header', 'lat', 'lat_dir', 'lon', 'lon_dir', 'mag_var', 'mag_var_direction', 'message_id', 'mode_indicator', 'position_status', 'speed', 'track', 'utc_seconds'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Gprmc(msg)
            %Gprmc Construct the message object Gprmc
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Gprmc', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function messageid = get.MessageId(obj)
            %get.MessageId Get the value for property MessageId
            messageid = char(obj.JavaMessage.getMessageId);
        end
        
        function set.MessageId(obj, messageid)
            %set.MessageId Set the value for property MessageId
            messageid = convertStringsToChars(messageid);
            
            validateattributes(messageid, {'char', 'string'}, {}, 'Gprmc', 'MessageId');
            
            obj.JavaMessage.setMessageId(messageid);
        end
        
        function utcseconds = get.UtcSeconds(obj)
            %get.UtcSeconds Get the value for property UtcSeconds
            utcseconds = double(obj.JavaMessage.getUtcSeconds);
        end
        
        function set.UtcSeconds(obj, utcseconds)
            %set.UtcSeconds Set the value for property UtcSeconds
            validateattributes(utcseconds, {'numeric'}, {'nonempty', 'scalar'}, 'Gprmc', 'UtcSeconds');
            
            obj.JavaMessage.setUtcSeconds(utcseconds);
        end
        
        function positionstatus = get.PositionStatus(obj)
            %get.PositionStatus Get the value for property PositionStatus
            positionstatus = char(obj.JavaMessage.getPositionStatus);
        end
        
        function set.PositionStatus(obj, positionstatus)
            %set.PositionStatus Set the value for property PositionStatus
            positionstatus = convertStringsToChars(positionstatus);
            
            validateattributes(positionstatus, {'char', 'string'}, {}, 'Gprmc', 'PositionStatus');
            
            obj.JavaMessage.setPositionStatus(positionstatus);
        end
        
        function lat = get.Lat(obj)
            %get.Lat Get the value for property Lat
            lat = double(obj.JavaMessage.getLat);
        end
        
        function set.Lat(obj, lat)
            %set.Lat Set the value for property Lat
            validateattributes(lat, {'numeric'}, {'nonempty', 'scalar'}, 'Gprmc', 'Lat');
            
            obj.JavaMessage.setLat(lat);
        end
        
        function lon = get.Lon(obj)
            %get.Lon Get the value for property Lon
            lon = double(obj.JavaMessage.getLon);
        end
        
        function set.Lon(obj, lon)
            %set.Lon Set the value for property Lon
            validateattributes(lon, {'numeric'}, {'nonempty', 'scalar'}, 'Gprmc', 'Lon');
            
            obj.JavaMessage.setLon(lon);
        end
        
        function latdir = get.LatDir(obj)
            %get.LatDir Get the value for property LatDir
            latdir = char(obj.JavaMessage.getLatDir);
        end
        
        function set.LatDir(obj, latdir)
            %set.LatDir Set the value for property LatDir
            latdir = convertStringsToChars(latdir);
            
            validateattributes(latdir, {'char', 'string'}, {}, 'Gprmc', 'LatDir');
            
            obj.JavaMessage.setLatDir(latdir);
        end
        
        function londir = get.LonDir(obj)
            %get.LonDir Get the value for property LonDir
            londir = char(obj.JavaMessage.getLonDir);
        end
        
        function set.LonDir(obj, londir)
            %set.LonDir Set the value for property LonDir
            londir = convertStringsToChars(londir);
            
            validateattributes(londir, {'char', 'string'}, {}, 'Gprmc', 'LonDir');
            
            obj.JavaMessage.setLonDir(londir);
        end
        
        function speed = get.Speed(obj)
            %get.Speed Get the value for property Speed
            speed = single(obj.JavaMessage.getSpeed);
        end
        
        function set.Speed(obj, speed)
            %set.Speed Set the value for property Speed
            validateattributes(speed, {'numeric'}, {'nonempty', 'scalar'}, 'Gprmc', 'Speed');
            
            obj.JavaMessage.setSpeed(speed);
        end
        
        function track = get.Track(obj)
            %get.Track Get the value for property Track
            track = single(obj.JavaMessage.getTrack);
        end
        
        function set.Track(obj, track)
            %set.Track Set the value for property Track
            validateattributes(track, {'numeric'}, {'nonempty', 'scalar'}, 'Gprmc', 'Track');
            
            obj.JavaMessage.setTrack(track);
        end
        
        function date = get.Date(obj)
            %get.Date Get the value for property Date
            date = char(obj.JavaMessage.getDate);
        end
        
        function set.Date(obj, date)
            %set.Date Set the value for property Date
            date = convertStringsToChars(date);
            
            validateattributes(date, {'char', 'string'}, {}, 'Gprmc', 'Date');
            
            obj.JavaMessage.setDate(date);
        end
        
        function magvar = get.MagVar(obj)
            %get.MagVar Get the value for property MagVar
            magvar = single(obj.JavaMessage.getMagVar);
        end
        
        function set.MagVar(obj, magvar)
            %set.MagVar Set the value for property MagVar
            validateattributes(magvar, {'numeric'}, {'nonempty', 'scalar'}, 'Gprmc', 'MagVar');
            
            obj.JavaMessage.setMagVar(magvar);
        end
        
        function magvardirection = get.MagVarDirection(obj)
            %get.MagVarDirection Get the value for property MagVarDirection
            magvardirection = char(obj.JavaMessage.getMagVarDirection);
        end
        
        function set.MagVarDirection(obj, magvardirection)
            %set.MagVarDirection Set the value for property MagVarDirection
            magvardirection = convertStringsToChars(magvardirection);
            
            validateattributes(magvardirection, {'char', 'string'}, {}, 'Gprmc', 'MagVarDirection');
            
            obj.JavaMessage.setMagVarDirection(magvardirection);
        end
        
        function modeindicator = get.ModeIndicator(obj)
            %get.ModeIndicator Get the value for property ModeIndicator
            modeindicator = char(obj.JavaMessage.getModeIndicator);
        end
        
        function set.ModeIndicator(obj, modeindicator)
            %set.ModeIndicator Set the value for property ModeIndicator
            modeindicator = convertStringsToChars(modeindicator);
            
            validateattributes(modeindicator, {'char', 'string'}, {}, 'Gprmc', 'ModeIndicator');
            
            obj.JavaMessage.setModeIndicator(modeindicator);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.MessageId = obj.MessageId;
            cpObj.UtcSeconds = obj.UtcSeconds;
            cpObj.PositionStatus = obj.PositionStatus;
            cpObj.Lat = obj.Lat;
            cpObj.Lon = obj.Lon;
            cpObj.LatDir = obj.LatDir;
            cpObj.LonDir = obj.LonDir;
            cpObj.Speed = obj.Speed;
            cpObj.Track = obj.Track;
            cpObj.Date = obj.Date;
            cpObj.MagVar = obj.MagVar;
            cpObj.MagVarDirection = obj.MagVarDirection;
            cpObj.ModeIndicator = obj.ModeIndicator;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.MessageId = strObj.MessageId;
            obj.UtcSeconds = strObj.UtcSeconds;
            obj.PositionStatus = strObj.PositionStatus;
            obj.Lat = strObj.Lat;
            obj.Lon = strObj.Lon;
            obj.LatDir = strObj.LatDir;
            obj.LonDir = strObj.LonDir;
            obj.Speed = strObj.Speed;
            obj.Track = strObj.Track;
            obj.Date = strObj.Date;
            obj.MagVar = strObj.MagVar;
            obj.MagVarDirection = strObj.MagVarDirection;
            obj.ModeIndicator = strObj.ModeIndicator;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.MessageId = obj.MessageId;
            strObj.UtcSeconds = obj.UtcSeconds;
            strObj.PositionStatus = obj.PositionStatus;
            strObj.Lat = obj.Lat;
            strObj.Lon = obj.Lon;
            strObj.LatDir = obj.LatDir;
            strObj.LonDir = obj.LonDir;
            strObj.Speed = obj.Speed;
            strObj.Track = obj.Track;
            strObj.Date = obj.Date;
            strObj.MagVar = obj.MagVar;
            strObj.MagVarDirection = obj.MagVarDirection;
            strObj.ModeIndicator = obj.ModeIndicator;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.Gprmc.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.Gprmc;
            obj.reload(strObj);
        end
    end
end
