classdef Insstdev < ros.Message
    %Insstdev MATLAB implementation of novatel_gps_msgs/Insstdev
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'novatel_gps_msgs/Insstdev' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '5a3ffc9969b49cd107b55c9843133d1c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        NovatelGpsMsgsNovatelExtendedSolutionStatusClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelExtendedSolutionStatus') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelExtendedSolutionStatus
        NovatelGpsMsgsNovatelMessageHeaderClass = ros.msg.internal.MessageFactory.getClassForType('novatel_gps_msgs/NovatelMessageHeader') % Dispatch to MATLAB class for message type novatel_gps_msgs/NovatelMessageHeader
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        NovatelMsgHeader
        LatitudeDev
        LongitudeDev
        HeightDev
        NorthVelocityDev
        EastVelocityDev
        UpVelocityDev
        RollDev
        PitchDev
        AzimuthDev
        ExtendedSolutionStatus
        TimeSinceUpdate
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'NovatelMsgHeader', [], 'ExtendedSolutionStatus', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AzimuthDev', 'EastVelocityDev', 'ExtendedSolutionStatus', 'Header', 'HeightDev', 'LatitudeDev', 'LongitudeDev', 'NorthVelocityDev', 'NovatelMsgHeader', 'PitchDev', 'RollDev', 'TimeSinceUpdate', 'UpVelocityDev'} % List of non-constant message properties
        ROSPropertyList = {'azimuth_dev', 'east_velocity_dev', 'extended_solution_status', 'header', 'height_dev', 'latitude_dev', 'longitude_dev', 'north_velocity_dev', 'novatel_msg_header', 'pitch_dev', 'roll_dev', 'time_since_update', 'up_velocity_dev'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Insstdev(msg)
            %Insstdev Construct the message object Insstdev
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Insstdev', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function novatelmsgheader = get.NovatelMsgHeader(obj)
            %get.NovatelMsgHeader Get the value for property NovatelMsgHeader
            if isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader = feval(obj.NovatelGpsMsgsNovatelMessageHeaderClass, obj.JavaMessage.getNovatelMsgHeader);
            end
            novatelmsgheader = obj.Cache.NovatelMsgHeader;
        end
        
        function set.NovatelMsgHeader(obj, novatelmsgheader)
            %set.NovatelMsgHeader Set the value for property NovatelMsgHeader
            validateattributes(novatelmsgheader, {obj.NovatelGpsMsgsNovatelMessageHeaderClass}, {'nonempty', 'scalar'}, 'Insstdev', 'NovatelMsgHeader');
            
            obj.JavaMessage.setNovatelMsgHeader(novatelmsgheader.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.NovatelMsgHeader)
                obj.Cache.NovatelMsgHeader.setJavaObject(novatelmsgheader.getJavaObject);
            end
        end
        
        function latitudedev = get.LatitudeDev(obj)
            %get.LatitudeDev Get the value for property LatitudeDev
            latitudedev = single(obj.JavaMessage.getLatitudeDev);
        end
        
        function set.LatitudeDev(obj, latitudedev)
            %set.LatitudeDev Set the value for property LatitudeDev
            validateattributes(latitudedev, {'numeric'}, {'nonempty', 'scalar'}, 'Insstdev', 'LatitudeDev');
            
            obj.JavaMessage.setLatitudeDev(latitudedev);
        end
        
        function longitudedev = get.LongitudeDev(obj)
            %get.LongitudeDev Get the value for property LongitudeDev
            longitudedev = single(obj.JavaMessage.getLongitudeDev);
        end
        
        function set.LongitudeDev(obj, longitudedev)
            %set.LongitudeDev Set the value for property LongitudeDev
            validateattributes(longitudedev, {'numeric'}, {'nonempty', 'scalar'}, 'Insstdev', 'LongitudeDev');
            
            obj.JavaMessage.setLongitudeDev(longitudedev);
        end
        
        function heightdev = get.HeightDev(obj)
            %get.HeightDev Get the value for property HeightDev
            heightdev = single(obj.JavaMessage.getHeightDev);
        end
        
        function set.HeightDev(obj, heightdev)
            %set.HeightDev Set the value for property HeightDev
            validateattributes(heightdev, {'numeric'}, {'nonempty', 'scalar'}, 'Insstdev', 'HeightDev');
            
            obj.JavaMessage.setHeightDev(heightdev);
        end
        
        function northvelocitydev = get.NorthVelocityDev(obj)
            %get.NorthVelocityDev Get the value for property NorthVelocityDev
            northvelocitydev = single(obj.JavaMessage.getNorthVelocityDev);
        end
        
        function set.NorthVelocityDev(obj, northvelocitydev)
            %set.NorthVelocityDev Set the value for property NorthVelocityDev
            validateattributes(northvelocitydev, {'numeric'}, {'nonempty', 'scalar'}, 'Insstdev', 'NorthVelocityDev');
            
            obj.JavaMessage.setNorthVelocityDev(northvelocitydev);
        end
        
        function eastvelocitydev = get.EastVelocityDev(obj)
            %get.EastVelocityDev Get the value for property EastVelocityDev
            eastvelocitydev = single(obj.JavaMessage.getEastVelocityDev);
        end
        
        function set.EastVelocityDev(obj, eastvelocitydev)
            %set.EastVelocityDev Set the value for property EastVelocityDev
            validateattributes(eastvelocitydev, {'numeric'}, {'nonempty', 'scalar'}, 'Insstdev', 'EastVelocityDev');
            
            obj.JavaMessage.setEastVelocityDev(eastvelocitydev);
        end
        
        function upvelocitydev = get.UpVelocityDev(obj)
            %get.UpVelocityDev Get the value for property UpVelocityDev
            upvelocitydev = single(obj.JavaMessage.getUpVelocityDev);
        end
        
        function set.UpVelocityDev(obj, upvelocitydev)
            %set.UpVelocityDev Set the value for property UpVelocityDev
            validateattributes(upvelocitydev, {'numeric'}, {'nonempty', 'scalar'}, 'Insstdev', 'UpVelocityDev');
            
            obj.JavaMessage.setUpVelocityDev(upvelocitydev);
        end
        
        function rolldev = get.RollDev(obj)
            %get.RollDev Get the value for property RollDev
            rolldev = single(obj.JavaMessage.getRollDev);
        end
        
        function set.RollDev(obj, rolldev)
            %set.RollDev Set the value for property RollDev
            validateattributes(rolldev, {'numeric'}, {'nonempty', 'scalar'}, 'Insstdev', 'RollDev');
            
            obj.JavaMessage.setRollDev(rolldev);
        end
        
        function pitchdev = get.PitchDev(obj)
            %get.PitchDev Get the value for property PitchDev
            pitchdev = single(obj.JavaMessage.getPitchDev);
        end
        
        function set.PitchDev(obj, pitchdev)
            %set.PitchDev Set the value for property PitchDev
            validateattributes(pitchdev, {'numeric'}, {'nonempty', 'scalar'}, 'Insstdev', 'PitchDev');
            
            obj.JavaMessage.setPitchDev(pitchdev);
        end
        
        function azimuthdev = get.AzimuthDev(obj)
            %get.AzimuthDev Get the value for property AzimuthDev
            azimuthdev = single(obj.JavaMessage.getAzimuthDev);
        end
        
        function set.AzimuthDev(obj, azimuthdev)
            %set.AzimuthDev Set the value for property AzimuthDev
            validateattributes(azimuthdev, {'numeric'}, {'nonempty', 'scalar'}, 'Insstdev', 'AzimuthDev');
            
            obj.JavaMessage.setAzimuthDev(azimuthdev);
        end
        
        function extendedsolutionstatus = get.ExtendedSolutionStatus(obj)
            %get.ExtendedSolutionStatus Get the value for property ExtendedSolutionStatus
            if isempty(obj.Cache.ExtendedSolutionStatus)
                obj.Cache.ExtendedSolutionStatus = feval(obj.NovatelGpsMsgsNovatelExtendedSolutionStatusClass, obj.JavaMessage.getExtendedSolutionStatus);
            end
            extendedsolutionstatus = obj.Cache.ExtendedSolutionStatus;
        end
        
        function set.ExtendedSolutionStatus(obj, extendedsolutionstatus)
            %set.ExtendedSolutionStatus Set the value for property ExtendedSolutionStatus
            validateattributes(extendedsolutionstatus, {obj.NovatelGpsMsgsNovatelExtendedSolutionStatusClass}, {'nonempty', 'scalar'}, 'Insstdev', 'ExtendedSolutionStatus');
            
            obj.JavaMessage.setExtendedSolutionStatus(extendedsolutionstatus.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ExtendedSolutionStatus)
                obj.Cache.ExtendedSolutionStatus.setJavaObject(extendedsolutionstatus.getJavaObject);
            end
        end
        
        function timesinceupdate = get.TimeSinceUpdate(obj)
            %get.TimeSinceUpdate Get the value for property TimeSinceUpdate
            timesinceupdate = typecast(int16(obj.JavaMessage.getTimeSinceUpdate), 'uint16');
        end
        
        function set.TimeSinceUpdate(obj, timesinceupdate)
            %set.TimeSinceUpdate Set the value for property TimeSinceUpdate
            validateattributes(timesinceupdate, {'numeric'}, {'nonempty', 'scalar'}, 'Insstdev', 'TimeSinceUpdate');
            
            obj.JavaMessage.setTimeSinceUpdate(timesinceupdate);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.NovatelMsgHeader = [];
            obj.Cache.ExtendedSolutionStatus = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.LatitudeDev = obj.LatitudeDev;
            cpObj.LongitudeDev = obj.LongitudeDev;
            cpObj.HeightDev = obj.HeightDev;
            cpObj.NorthVelocityDev = obj.NorthVelocityDev;
            cpObj.EastVelocityDev = obj.EastVelocityDev;
            cpObj.UpVelocityDev = obj.UpVelocityDev;
            cpObj.RollDev = obj.RollDev;
            cpObj.PitchDev = obj.PitchDev;
            cpObj.AzimuthDev = obj.AzimuthDev;
            cpObj.TimeSinceUpdate = obj.TimeSinceUpdate;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.NovatelMsgHeader = copy(obj.NovatelMsgHeader);
            cpObj.ExtendedSolutionStatus = copy(obj.ExtendedSolutionStatus);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.LatitudeDev = strObj.LatitudeDev;
            obj.LongitudeDev = strObj.LongitudeDev;
            obj.HeightDev = strObj.HeightDev;
            obj.NorthVelocityDev = strObj.NorthVelocityDev;
            obj.EastVelocityDev = strObj.EastVelocityDev;
            obj.UpVelocityDev = strObj.UpVelocityDev;
            obj.RollDev = strObj.RollDev;
            obj.PitchDev = strObj.PitchDev;
            obj.AzimuthDev = strObj.AzimuthDev;
            obj.TimeSinceUpdate = strObj.TimeSinceUpdate;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.NovatelMsgHeader = feval([obj.NovatelGpsMsgsNovatelMessageHeaderClass '.loadobj'], strObj.NovatelMsgHeader);
            obj.ExtendedSolutionStatus = feval([obj.NovatelGpsMsgsNovatelExtendedSolutionStatusClass '.loadobj'], strObj.ExtendedSolutionStatus);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.LatitudeDev = obj.LatitudeDev;
            strObj.LongitudeDev = obj.LongitudeDev;
            strObj.HeightDev = obj.HeightDev;
            strObj.NorthVelocityDev = obj.NorthVelocityDev;
            strObj.EastVelocityDev = obj.EastVelocityDev;
            strObj.UpVelocityDev = obj.UpVelocityDev;
            strObj.RollDev = obj.RollDev;
            strObj.PitchDev = obj.PitchDev;
            strObj.AzimuthDev = obj.AzimuthDev;
            strObj.TimeSinceUpdate = obj.TimeSinceUpdate;
            strObj.Header = saveobj(obj.Header);
            strObj.NovatelMsgHeader = saveobj(obj.NovatelMsgHeader);
            strObj.ExtendedSolutionStatus = saveobj(obj.ExtendedSolutionStatus);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.novatel_gps_msgs.Insstdev.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.novatel_gps_msgs.Insstdev;
            obj.reload(strObj);
        end
    end
end
